--- a/net/minecraft/commands/Commands.java
+++ b/net/minecraft/commands/Commands.java
@@ -128,8 +_,10 @@
    public static final int f_165685_ = 3;
    public static final int f_165686_ = 4;
    private final CommandDispatcher<CommandSourceStack> f_82090_ = new CommandDispatcher<>();
+   private final CommandDispatcher<CommandSourceStack> forgeDispatcher = new CommandDispatcher<>(); //Ketting
 
    public Commands(Commands.CommandSelection p_230943_, CommandBuildContext p_230944_) {
+      this(); // CraftBukkit
       AdvancementCommands.m_136310_(this.f_82090_);
       AttributeCommand.m_245835_(this.f_82090_, p_230944_);
       ExecuteCommand.m_214434_(this.f_82090_, p_230944_);
@@ -193,7 +_,7 @@
          JfrCommand.m_183645_(this.f_82090_);
       }
 
-      if (SharedConstants.f_136183_) {
+      if (net.minecraftforge.gametest.ForgeGameTestHooks.isGametestEnabled()) {
          TestCommand.m_127946_(this.f_82090_);
          SpawnArmorTrimsCommand.m_266283_(this.f_82090_);
       }
@@ -218,10 +_,21 @@
       if (p_230943_.f_82144_) {
          PublishCommand.m_138184_(this.f_82090_);
       }
+      net.minecraftforge.event.ForgeEventFactory.onCommandRegister(this.forgeDispatcher, p_230943_, p_230944_); //Ketting
+      // CraftBukkit start
+   }
 
+   public Commands() {
       this.f_82090_.setConsumer((p_230954_, p_230955_, p_230956_) -> {
          p_230954_.getSource().m_81342_(p_230954_, p_230955_, p_230956_);
       });
+      // CraftBukkit end
+
+      //Ketting start
+      this.forgeDispatcher.setConsumer((p_230954_, p_230955_, p_230956_) -> {
+         p_230954_.getSource().m_81342_(p_230954_, p_230955_, p_230956_);
+      });
+      //Ketting end
    }
 
    public static <S> ParseResults<S> m_242611_(ParseResults<S> p_242928_, UnaryOperator<S> p_242890_) {
@@ -230,12 +_,68 @@
       return new ParseResults<>(commandcontextbuilder1, p_242928_.getReader(), p_242928_.getExceptions());
    }
 
+   // CraftBukkit start
+   public int dispatchServerCommand(CommandSourceStack p_230958_, String p_230959_) {
+      com.google.common.base.Joiner joiner = com.google.common.base.Joiner.on(" ");
+      if (p_230959_.startsWith("/")) {
+         p_230959_ = p_230959_.substring(1);
+      }
+
+      org.bukkit.event.server.ServerCommandEvent event = new org.bukkit.event.server.ServerCommandEvent(p_230958_.getBukkitSender(), p_230959_);
+      org.bukkit.Bukkit.getPluginManager().callEvent(event);
+      if (event.isCancelled()) {
+         return 0;
+      }
+      p_230959_ = event.getCommand();
+
+      String[] args = p_230959_.split(" ");
+
+      String cmd = args[0];
+      if (cmd.startsWith("minecraft:")) cmd = cmd.substring("minecraft:".length());
+      if (cmd.startsWith("bukkit:")) cmd = cmd.substring("bukkit:".length());
+      if (cmd.startsWith("forge:")) {
+         setForgeCommand(true);
+         cmd = cmd.substring("forge:".length());
+      }
+
+      // Block disallowed commands
+      if (cmd.equalsIgnoreCase("stop") || cmd.equalsIgnoreCase("kick") || cmd.equalsIgnoreCase("op")
+              || cmd.equalsIgnoreCase("deop") || cmd.equalsIgnoreCase("ban") || cmd.equalsIgnoreCase("ban-ip")
+              || cmd.equalsIgnoreCase("pardon") || cmd.equalsIgnoreCase("pardon-ip") || cmd.equalsIgnoreCase("reload")) {
+         setForgeCommand(false);
+         return 0;
+      }
+
+      // Handle vanilla commands;
+      if (p_230958_.m_81372_().getCraftServer().getCommandBlockOverride(args[0])) {
+         args[0] = "minecraft:" + args[0];
+      }
+
+      String newCommand = joiner.join(args);
+      try {
+         return this.performPrefixedCommand(p_230958_, newCommand, newCommand);
+      } finally {
+         setForgeCommand(false);
+      }
+   }
+   // CraftBukkit end
+
    public int m_230957_(CommandSourceStack p_230958_, String p_230959_) {
-      p_230959_ = p_230959_.startsWith("/") ? p_230959_.substring(1) : p_230959_;
-      return this.m_242674_(this.f_82090_.parse(p_230959_, p_230958_), p_230959_);
+      // CraftBukkit start
+      return this.performPrefixedCommand(p_230958_, p_230959_, p_230959_);
+   }
+
+   public int performPrefixedCommand(CommandSourceStack commandlistenerwrapper, String s, String label) {
+      s = s.startsWith("/") ? s.substring(1) : s;
+      return this.performCommand(this.getCorrectDispatcher(s).unwrap().parse(s, commandlistenerwrapper), s, label);
+      // CraftBukkit end
    }
 
    public int m_242674_(ParseResults<CommandSourceStack> p_242844_, String p_242841_) {
+      return this.performCommand(p_242844_, p_242841_, p_242841_);
+   }
+
+   public int performCommand(ParseResults<CommandSourceStack> p_242844_, String p_242841_, String label) { // CraftBukkit
       CommandSourceStack commandsourcestack = p_242844_.getContext().getSource();
       commandsourcestack.m_81377_().m_129905_().m_6521_(() -> {
          return "/" + p_242841_;
@@ -243,7 +_,16 @@
 
       try {
          try {
-            return this.f_82090_.execute(p_242844_);
+            net.minecraftforge.event.CommandEvent event = new net.minecraftforge.event.CommandEvent(p_242844_);
+            if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event)) {
+               if (event.getException() instanceof Exception exception) {
+                  throw exception;
+               } else if (event.getException() != null) {
+                  com.google.common.base.Throwables.throwIfUnchecked(event.getException());
+               }
+               return 1;
+            }
+            return this.getCorrectDispatcher(p_242841_).unwrap().execute(event.getParseResults());
          } catch (CommandRuntimeException commandruntimeexception) {
             commandsourcestack.m_81352_(commandruntimeexception.m_79226_());
             return 0;
@@ -252,7 +_,7 @@
             if (commandsyntaxexception.getInput() != null && commandsyntaxexception.getCursor() >= 0) {
                int j = Math.min(commandsyntaxexception.getInput().length(), commandsyntaxexception.getCursor());
                MutableComponent mutablecomponent1 = Component.m_237119_().m_130940_(ChatFormatting.GRAY).m_130938_((p_82134_) -> {
-                  return p_82134_.m_131142_(new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, "/" + p_242841_));
+                  return p_82134_.m_131142_(new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, "/" + label)); // CraftBukkit
                });
                if (j > 10) {
                   mutablecomponent1.m_7220_(CommonComponents.f_238772_);
@@ -295,16 +_,60 @@
       }
    }
 
+   //Ketting start - rewrite to add forge dispatcher support
    public void m_82095_(ServerPlayer p_82096_) {
-      Map<CommandNode<CommandSourceStack>, CommandNode<SharedSuggestionProvider>> map = Maps.newHashMap();
+      if ( org.spigotmc.SpigotConfig.tabComplete < 0 ) return; // Spigot
+      // CraftBukkit start
+      // Register Vanilla commands into builtRoot as before
+      Map<CommandNode<CommandSourceStack>, CommandNode<SharedSuggestionProvider>> map = Maps.newIdentityHashMap(); // Use identity to prevent aliasing issues
+
+      RootCommandNode<SharedSuggestionProvider> vanillaRoot = new RootCommandNode<>();
+      Commands vanillaCommands = p_82096_.f_8924_.vanillaCommandDispatcher;
+      map.put(vanillaCommands.m_82094_().getRoot(), vanillaRoot);
+
+      // FORGE: Use our own command node merging method to handle redirect nodes properly, see issue #7551
+      net.minecraftforge.server.command.CommandHelper.mergeCommandNode(vanillaCommands.m_82094_().getRoot(), vanillaRoot, map, p_82096_.m_20203_(), ctx -> 0, suggest -> SuggestionProviders.m_121664_((com.mojang.brigadier.suggestion.SuggestionProvider<SharedSuggestionProvider>) (com.mojang.brigadier.suggestion.SuggestionProvider<?>) suggest));
+
+      // Now build the global commands in a second pass
       RootCommandNode<SharedSuggestionProvider> rootcommandnode = new RootCommandNode<>();
       map.put(this.f_82090_.getRoot(), rootcommandnode);
-      this.m_82112_(this.f_82090_.getRoot(), rootcommandnode, p_82096_.m_20203_(), map);
-      p_82096_.f_8906_.m_141995_(new ClientboundCommandsPacket(rootcommandnode));
+
+      net.minecraftforge.server.command.CommandHelper.mergeCommandNode(this.f_82090_.getRoot(), rootcommandnode, map, p_82096_.m_20203_(), ctx -> 0, suggest -> SuggestionProviders.m_121664_((com.mojang.brigadier.suggestion.SuggestionProvider<SharedSuggestionProvider>) (com.mojang.brigadier.suggestion.SuggestionProvider<?>) suggest));
+
+      java.util.LinkedHashSet<String> set = new java.util.LinkedHashSet<>();
+      for (CommandNode<SharedSuggestionProvider> child : rootcommandnode.getChildren()) {
+         set.add(child.getName());
+      }
+
+      org.bukkit.event.player.PlayerCommandSendEvent event = new org.bukkit.event.player.PlayerCommandSendEvent(p_82096_.getBukkitEntity(), new java.util.LinkedHashSet<>(set));
+      event.getPlayer().getServer().getPluginManager().callEvent(event);
+
+      // Remove labels that were removed during the event
+      for (String orig : set) {
+         if (!event.getCommands().contains(orig)) {
+               rootcommandnode.removeCommand(orig);
+         }
+      }
+
+      //Now add the forge commands
+      RootCommandNode<SharedSuggestionProvider> forgeRoot = new RootCommandNode<>();
+      map.put(this.forgeDispatcher.getRoot(), forgeRoot);
+
+      net.minecraftforge.server.command.CommandHelper.mergeCommandNode(this.forgeDispatcher.getRoot(), forgeRoot, map, p_82096_.m_20203_(), ctx -> 0, suggest -> SuggestionProviders.m_121664_((com.mojang.brigadier.suggestion.SuggestionProvider<SharedSuggestionProvider>) (com.mojang.brigadier.suggestion.SuggestionProvider<?>) suggest));
+
+      //Add all the forge commands to the root node
+      forgeRoot.getChildren().forEach(rootcommandnode::addChild);
+
+      ClientboundCommandsPacket packet = new ClientboundCommandsPacket(rootcommandnode);
+      //Ketting TODO - ambassador support
+      p_82096_.f_8906_.m_141995_(packet);
    }
+   //Ketting end
 
    private void m_82112_(CommandNode<CommandSourceStack> p_82113_, CommandNode<SharedSuggestionProvider> p_82114_, CommandSourceStack p_82115_, Map<CommandNode<CommandSourceStack>, CommandNode<SharedSuggestionProvider>> p_82116_) {
       for(CommandNode<CommandSourceStack> commandnode : p_82113_.getChildren()) {
+         if ( !org.spigotmc.SpigotConfig.sendNamespaced && commandnode.getName().contains( ":" ) ) continue; // Spigot
+
          if (commandnode.canUse(p_82115_)) {
             ArgumentBuilder<SharedSuggestionProvider, ?> argumentbuilder = (ArgumentBuilder)commandnode.createBuilder();
             argumentbuilder.requires((p_82126_) -> {
@@ -358,7 +_,44 @@
    }
 
    public CommandDispatcher<CommandSourceStack> m_82094_() {
+      if (org.kettingpowered.ketting.common.utils.DispatcherRedirector.needsRedirect())
+         return getForgeDispatcher().unwrap();
       return this.f_82090_;
+   }
+
+   public org.kettingpowered.ketting.common.utils.Wrapper<CommandDispatcher<CommandSourceStack>> getForgeDispatcher() {
+      return org.kettingpowered.ketting.common.utils.Wrapper.wrap(this.forgeDispatcher);
+   }
+
+   //Ketting start - dispatcher correction
+   private boolean forgeCommand = false;
+   public void setForgeCommand(boolean forgeCommand) {
+      this.forgeCommand = forgeCommand;
+   }
+
+   public org.kettingpowered.ketting.common.utils.Wrapper<CommandDispatcher<CommandSourceStack>> getCorrectDispatcher(String cmd) {
+      if (forgeCommand) return getForgeDispatcher();
+
+      String literal = cmd.split(" ")[0]; //the command root, ex. deop
+      if (literal.startsWith("/"))
+         literal = literal.substring(1);
+      if (literal.startsWith("forge:"))
+         return getForgeDispatcher();
+
+      final String search = literal;
+      CommandNode<CommandSourceStack> found = getForgeDispatcher().unwrap()
+              .getRoot()
+              .getChildren()
+              .stream()
+              .filter(node -> node instanceof com.mojang.brigadier.tree.LiteralCommandNode)
+              .filter(node -> ((com.mojang.brigadier.tree.LiteralCommandNode<?>) node).getLiteral().equals(search))
+              .findFirst()
+              .orElse(null);
+
+      if (found != null)
+         return getForgeDispatcher();
+
+      return org.kettingpowered.ketting.common.utils.Wrapper.wrap(m_82094_()); //Call getDispatcher so we can still redirect if needed
    }
 
    @Nullable
