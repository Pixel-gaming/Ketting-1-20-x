--- a/net/minecraft/server/dedicated/Settings.java
+++ b/net/minecraft/server/dedicated/Settings.java
@@ -26,13 +_,34 @@
 public abstract class Settings<T extends Settings<T>> {
    private static final Logger f_139797_ = LogUtils.getLogger();
    public final Properties f_139798_;
+   // CraftBukkit start
+   private joptsimple.OptionSet options = null;
 
    public Settings(Properties p_139801_) {
+      this(p_139801_, new joptsimple.OptionParser().parse());
+   }
+   public Settings(Properties p_139801_, final joptsimple.OptionSet options) {
       this.f_139798_ = p_139801_;
+      this.options = options;
+   }
+
+   private String getOverride(String name, String value) {
+      if ((this.options != null) && (this.options.has(name)) && !name.equals( "online-mode")) { // Spigot
+         return String.valueOf(this.options.valueOf(name));
+      }
+
+      return value;
+      // CraftBukkit end
    }
 
    public static Properties m_139839_(Path p_139840_) {
       try {
+         // CraftBukkit start - SPIGOT-7465, MC-264979: Don't load if file doesn't exist
+         if (!p_139840_.toFile().exists()) {
+            return new Properties();
+         }
+         // CraftBukkit end
+
          try (InputStream inputstream = Files.newInputStream(p_139840_)) {
             CharsetDecoder charsetdecoder = StandardCharsets.UTF_8.newDecoder().onMalformedInput(CodingErrorAction.REPORT).onUnmappableCharacter(CodingErrorAction.REPORT);
             Properties properties1 = new Properties();
@@ -54,8 +_,14 @@
    }
 
    public void m_139876_(Path p_139877_) {
+      // CraftBukkit start - Don't attempt writing to file if it's read only
+      if (p_139877_.toFile().exists() && !p_139877_.toFile().canWrite()) {
+         return;
+      }
+      // CraftBukkit end
+
       try (Writer writer = Files.newBufferedWriter(p_139877_, StandardCharsets.UTF_8)) {
-         this.f_139798_.store(writer, "Minecraft server properties");
+         net.minecraftforge.common.util.SortedProperties.store(this.f_139798_, writer, "Minecraft server properties");
       } catch (IOException ioexception) {
          f_139797_.error("Failed to store properties to file: {}", (Object)p_139877_);
       }
@@ -84,7 +_,7 @@
 
    @Nullable
    private String m_139878_(String p_139879_) {
-      return (String)this.f_139798_.get(p_139879_);
+      return (String) getOverride(p_139879_, this.f_139798_.getProperty(p_139879_)); // CraftBukkit
    }
 
    @Nullable
@@ -99,6 +_,16 @@
    }
 
    protected <V> V m_139821_(String p_139822_, Function<String, V> p_139823_, Function<V, String> p_139824_, V p_139825_) {
+      // CraftBukkit start
+      try {
+         return get0(p_139822_, p_139823_, p_139824_, p_139825_);
+      } catch (Exception ex) {
+         throw new RuntimeException("Could not load invalidly configured property '" + p_139822_ + "'", ex);
+      }
+   }
+
+   private <V> V get0(String p_139822_, Function<String, V> p_139823_, Function<V, String> p_139824_, V p_139825_) {
+      // CraftBukkit end
       String s = this.m_139878_(p_139822_);
       V v = MoreObjects.firstNonNull((V)(s != null ? p_139823_.apply(s) : null), p_139825_);
       this.f_139798_.put(p_139822_, p_139824_.apply(v));
@@ -171,7 +_,13 @@
       return properties;
    }
 
-   protected abstract T m_6764_(RegistryAccess p_139857_, Properties p_139858_);
+   protected T m_6764_(RegistryAccess p_139857_, Properties p_139858_){
+      return reload(p_139857_, p_139858_, new joptsimple.OptionParser().parse());
+   }
+   // CraftBukkit
+   protected T reload(RegistryAccess p_139857_, Properties p_139858_, joptsimple.OptionSet optionset){
+      throw new AbstractMethodError();
+   } 
 
    public class MutableValue<V> implements Supplier<V> {
       private final String f_139881_;
@@ -191,7 +_,7 @@
       public T m_139895_(RegistryAccess p_139896_, V p_139897_) {
          Properties properties = Settings.this.m_139802_();
          properties.put(this.f_139881_, this.f_139883_.apply(p_139897_));
-         return Settings.this.m_6764_(p_139896_, properties);
+         return Settings.this.reload(p_139896_, properties, Settings.this.options); // CraftBukkit
       }
    }
 }
