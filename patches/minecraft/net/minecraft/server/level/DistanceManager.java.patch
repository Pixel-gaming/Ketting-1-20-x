--- a/net/minecraft/server/level/DistanceManager.java
+++ b/net/minecraft/server/level/DistanceManager.java
@@ -54,7 +_,10 @@
    private long f_140771_;
    private int f_183902_ = 10;
 
+   private final Long2ObjectOpenHashMap<SortedArraySet<Ticket<?>>> forcedTickets = new Long2ObjectOpenHashMap<>();
+
    protected DistanceManager(Executor p_140774_, Executor p_140775_) {
+      java.util.Objects.requireNonNull(p_140775_);
       ProcessorHandle<Runnable> processorhandle = ProcessorHandle.m_18714_("player ticket throttler", p_140775_::execute);
       ChunkTaskPriorityQueueSorter chunktaskpriorityqueuesorter = new ChunkTaskPriorityQueueSorter(ImmutableList.of(processorhandle), p_140774_, 4);
       this.f_140766_ = chunktaskpriorityqueuesorter;
@@ -114,10 +_,26 @@
       }
 
       if (!this.f_140765_.isEmpty()) {
-         this.f_140765_.forEach((p_183908_) -> {
-            p_183908_.m_143003_(p_140806_, this.f_140770_);
-         });
-         this.f_140765_.clear();
+         // CraftBukkit start
+         // Iterate pending chunk updates with protection against concurrent modification exceptions
+
+         java.util.Iterator<ChunkHolder> iter = this.f_140765_.iterator();
+         int expectedSize = this.f_140765_.size();
+         do {
+            ChunkHolder playerchunk = iter.next();
+            iter.remove();
+            expectedSize--;
+
+            playerchunk.m_143003_(p_140806_, this.f_140770_);
+
+            // Reset iterator if set was modified using add()
+            if (this.f_140765_.size() != expectedSize) {
+               expectedSize = this.f_140765_.size();
+               iter = this.f_140765_.iterator();
+            }
+         } while (iter.hasNext());
+         // CraftBukkit end
+
          return true;
       } else {
          if (!this.f_140769_.isEmpty()) {
@@ -150,7 +_,7 @@
       }
    }
 
-   void m_140784_(long p_140785_, Ticket<?> p_140786_) {
+   boolean addTicket(long p_140785_, Ticket<?> p_140786_) { // CraftBukkit - void -> boolean
       SortedArraySet<Ticket<?>> sortedarrayset = this.m_140857_(p_140785_);
       int i = m_140797_(sortedarrayset);
       Ticket<?> ticket = sortedarrayset.m_14253_(p_140786_);
@@ -159,11 +_,20 @@
          this.f_140762_.m_140715_(p_140785_, p_140786_.m_9433_(), true);
       }
 
+      if (p_140786_.isForceTicks()) {
+          SortedArraySet<Ticket<?>> tickets = forcedTickets.computeIfAbsent(p_140785_, e -> SortedArraySet.m_14246_(4));
+          tickets.m_14253_(ticket);
+      }
+
+      return p_140786_ == ticket; // CraftBukkit
    }
 
-   void m_140818_(long p_140819_, Ticket<?> p_140820_) {
+   boolean removeTicket(long p_140819_, Ticket<?> p_140820_) { // CraftBukkit - void -> boolean
       SortedArraySet<Ticket<?>> sortedarrayset = this.m_140857_(p_140819_);
+
+      boolean removed = false; // CraftBukkit
       if (sortedarrayset.remove(p_140820_)) {
+         removed = true; // CraftBukkit
       }
 
       if (sortedarrayset.isEmpty()) {
@@ -171,29 +_,69 @@
       }
 
       this.f_140762_.m_140715_(p_140819_, m_140797_(sortedarrayset), false);
+
+      if (p_140820_.isForceTicks()) {
+          SortedArraySet<Ticket<?>> tickets = forcedTickets.get(p_140819_);
+          if (tickets != null) {
+              tickets.remove(p_140820_);
+              removed = true; // Ketting - forge compat
+          }
+      }
+
+      return removed; // CraftBukkit
    }
 
    public <T> void m_140792_(TicketType<T> p_140793_, ChunkPos p_140794_, int p_140795_, T p_140796_) {
-      this.m_140784_(p_140794_.m_45588_(), new Ticket<>(p_140793_, p_140795_, p_140796_));
+      this.addTicket(p_140794_.m_45588_(), new Ticket<>(p_140793_, p_140795_, p_140796_));
    }
 
    public <T> void m_140823_(TicketType<T> p_140824_, ChunkPos p_140825_, int p_140826_, T p_140827_) {
       Ticket<T> ticket = new Ticket<>(p_140824_, p_140826_, p_140827_);
-      this.m_140818_(p_140825_.m_45588_(), ticket);
+      this.removeTicket(p_140825_.m_45588_(), ticket);
    }
 
+   private boolean addRegionTicket$forceTicks; //Ketting
    public <T> void m_140840_(TicketType<T> p_140841_, ChunkPos p_140842_, int p_140843_, T p_140844_) {
-      Ticket<T> ticket = new Ticket<>(p_140841_, ChunkLevel.m_287154_(FullChunkStatus.FULL) - p_140843_, p_140844_);
-      long i = p_140842_.m_45588_();
-      this.m_140784_(i, ticket);
-      this.f_183901_.m_184151_(i, ticket);
-   }
-
+      // CraftBukkit start
+      addRegionTicketAtDistance(p_140841_, p_140842_, p_140843_, p_140844_);
+   }
+
+   public <T> boolean addRegionTicketAtDistance(TicketType<T> tickettype, ChunkPos chunkcoordintpair, int i, T t0) {
+      // CraftBukkit end
+      Ticket<T> ticket = new Ticket<>(tickettype, ChunkLevel.m_287154_(FullChunkStatus.FULL) - i, t0, addRegionTicket$forceTicks); //Ketting
+      long j = chunkcoordintpair.m_45588_();
+
+      boolean added = this.addTicket(j, ticket); // CraftBukkit
+      this.f_183901_.m_184151_(j, ticket);
+      return added; // CraftBukkit
+   }
+
+   public <T> void addRegionTicket(TicketType<T> p_140841_, ChunkPos p_140842_, int p_140843_, T p_140844_, boolean forceTicks) {
+      addRegionTicket$forceTicks = forceTicks; //Ketting
+      m_140840_(p_140841_, p_140842_, p_140843_, p_140844_);
+      addRegionTicket$forceTicks = false; //Ketting
+   }
+
+   private boolean removeRegionTicket$forceTicks; //Ketting
    public <T> void m_140849_(TicketType<T> p_140850_, ChunkPos p_140851_, int p_140852_, T p_140853_) {
-      Ticket<T> ticket = new Ticket<>(p_140850_, ChunkLevel.m_287154_(FullChunkStatus.FULL) - p_140852_, p_140853_);
-      long i = p_140851_.m_45588_();
-      this.m_140818_(i, ticket);
-      this.f_183901_.m_184165_(i, ticket);
+      // CraftBukkit start
+      removeRegionTicketAtDistance(p_140850_, p_140851_, p_140852_, p_140853_);
+   }
+
+   public <T> boolean removeRegionTicketAtDistance(TicketType<T> tickettype, ChunkPos chunkcoordintpair, int i, T t0) {
+      // CraftBukkit end
+      Ticket<T> ticket = new Ticket<>(tickettype, ChunkLevel.m_287154_(FullChunkStatus.FULL) - i, t0, removeRegionTicket$forceTicks); //Ketting
+      long j = chunkcoordintpair.m_45588_();
+
+      boolean removed = this.removeTicket(j, ticket); // CraftBukkit
+      this.f_183901_.m_184165_(j, ticket);
+      return removed; // CraftBukkit
+   }
+
+   public <T> void removeRegionTicket(TicketType<T> p_140850_, ChunkPos p_140851_, int p_140852_, T p_140853_, boolean forceTicks) {
+      removeRegionTicket$forceTicks = forceTicks; //Ketting
+      m_140849_(p_140850_, p_140851_, p_140852_, p_140853_);
+      removeRegionTicket$forceTicks = false; //Ketting
    }
 
    private SortedArraySet<Ticket<?>> m_140857_(long p_140858_) {
@@ -206,10 +_,10 @@
       Ticket<ChunkPos> ticket = new Ticket<>(TicketType.f_9445_, ChunkMap.f_143033_, p_140800_);
       long i = p_140800_.m_45588_();
       if (p_140801_) {
-         this.m_140784_(i, ticket);
+         this.addTicket(i, ticket);
          this.f_183901_.m_184151_(i, ticket);
       } else {
-         this.m_140818_(i, ticket);
+         this.removeTicket(i, ticket);
          this.f_183901_.m_184165_(i, ticket);
       }
 
@@ -230,6 +_,8 @@
       ChunkPos chunkpos = p_140829_.m_123251_();
       long i = chunkpos.m_45588_();
       ObjectSet<ServerPlayer> objectset = this.f_140760_.get(i);
+      if (objectset == null) return; // CraftBukkit - SPIGOT-6208
+
       objectset.remove(p_140830_);
       if (objectset.isEmpty()) {
          this.f_140760_.remove(i);
@@ -283,6 +_,11 @@
       return this.f_140766_.m_140558_();
    }
 
+   public boolean shouldForceTicks(long chunkPos) {
+       SortedArraySet<Ticket<?>> tickets = forcedTickets.get(chunkPos);
+       return tickets != null && !tickets.isEmpty();
+   }
+
    private void m_143207_(String p_143208_) {
       try (FileOutputStream fileoutputstream = new FileOutputStream(new File(p_143208_))) {
          for(Long2ObjectMap.Entry<SortedArraySet<Ticket<?>>> entry : this.f_140761_.long2ObjectEntrySet()) {
@@ -336,6 +_,26 @@
       return !this.f_140761_.isEmpty();
    }
 
+   // CraftBukkit start
+   public <T> void removeAllTicketsFor(TicketType<T> ticketType, int ticketLevel, T ticketIdentifier) {
+      Ticket<T> target = new Ticket<>(ticketType, ticketLevel, ticketIdentifier);
+
+      for (java.util.Iterator<Long2ObjectMap.Entry<SortedArraySet<Ticket<?>>>> iterator = this.f_140761_.long2ObjectEntrySet().fastIterator(); iterator.hasNext();) {
+         Long2ObjectMap.Entry<SortedArraySet<Ticket<?>>> entry = iterator.next();
+         SortedArraySet<Ticket<?>> tickets = entry.getValue();
+         if (tickets.remove(target)) {
+            // copied from removeTicket
+            this.f_140762_.m_140715_(entry.getLongKey(), m_140797_(tickets), false);
+
+            // can't use entry after it's removed
+            if (tickets.isEmpty()) {
+               iterator.remove();
+            }
+         }
+      }
+   }
+   // CraftBukkit end
+
    class ChunkTicketTracker extends ChunkTracker {
       private static final int f_286988_ = ChunkLevel.f_286967_ + 1;
 
@@ -467,7 +_,7 @@
                DistanceManager.this.f_140767_.m_6937_(ChunkTaskPriorityQueueSorter.m_140624_(() -> {
                   DistanceManager.this.f_140770_.execute(() -> {
                      if (this.m_140932_(this.m_6172_(p_140919_))) {
-                        DistanceManager.this.m_140784_(p_140919_, ticket);
+                        DistanceManager.this.addTicket(p_140919_, ticket);
                         DistanceManager.this.f_140769_.add(p_140919_);
                      } else {
                         DistanceManager.this.f_140768_.m_6937_(ChunkTaskPriorityQueueSorter.m_140628_(() -> {
@@ -481,7 +_,7 @@
             } else {
                DistanceManager.this.f_140768_.m_6937_(ChunkTaskPriorityQueueSorter.m_140628_(() -> {
                   DistanceManager.this.f_140770_.execute(() -> {
-                     DistanceManager.this.m_140818_(p_140919_, ticket);
+                     DistanceManager.this.removeTicket(p_140919_, ticket);
                   });
                }, p_140919_, true));
             }
