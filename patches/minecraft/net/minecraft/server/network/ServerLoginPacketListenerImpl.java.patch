--- a/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -54,6 +_,7 @@
    @Nullable
    private GameProfile f_291112_;
    private final String f_10022_ = "";
+   private net.minecraft.server.level.ServerPlayer player; // CraftBukkit
 
    public ServerLoginPacketListenerImpl(MinecraftServer p_10027_, Connection p_10028_) {
       this.f_10018_ = p_10027_;
@@ -62,7 +_,10 @@
    }
 
    public void m_9933_() {
-      if (this.f_10019_ == ServerLoginPacketListenerImpl.State.VERIFYING) {
+      if (this.f_10019_ == State.NEGOTIATING) { //TODO: Redesign with new protocol switching Mojang added
+         if (net.minecraftforge.network.NetworkHooks.tickNegotiation(this.f_10013_))
+            this.f_10019_ = State.VERIFYING;
+      } else if (this.f_10019_ == ServerLoginPacketListenerImpl.State.VERIFYING) {
          this.m_294778_(Objects.requireNonNull(this.f_291112_));
       }
 
@@ -76,6 +_,13 @@
 
    }
 
+   // CraftBukkit start
+   @Deprecated
+   public void disconnect(String s) {
+      m_10053_(Component.m_237113_(s));
+   }
+   // CraftBukkit end
+
    public boolean m_6198_() {
       return this.f_10013_.m_129536_();
    }
@@ -101,7 +_,7 @@
 
    public String m_10056_() {
       String s = this.f_10013_.m_295656_(this.f_10018_.m_292975_());
-      return this.f_291165_ != null ? this.f_291165_ + " (" + s + ")" : s;
+      return this.f_291112_ != null ? this.f_291112_ + " (" + s + ")" : s;
    }
 
    public void m_5990_(ServerboundHelloPacket p_10047_) {
@@ -110,13 +_,27 @@
       this.f_291165_ = p_10047_.f_238040_();
       GameProfile gameprofile = this.f_10018_.m_236731_();
       if (gameprofile != null && this.f_291165_.equalsIgnoreCase(gameprofile.getName())) {
-         this.m_294008_(gameprofile);
+         this.f_10019_ = ServerLoginPacketListenerImpl.State.NEGOTIATING; // FORGE: continue NEGOTIATING, we move to READY_TO_ACCEPT after Forge is ready
       } else {
          if (this.f_10018_.m_129797_() && !this.f_10013_.m_129531_()) {
             this.f_10019_ = ServerLoginPacketListenerImpl.State.KEY;
             this.f_10013_.m_129512_(new ClientboundHelloPacket("", this.f_10018_.m_129790_().getPublic().getEncoded(), this.f_252396_));
          } else {
-            this.m_294008_(m_295545_(this.f_291165_));
+            //this.state = ServerLoginPacketListenerImpl.State.NEGOTIATING; // FORGE: continue NEGOTIATING, we move to READY_TO_ACCEPT after Forge is ready
+            // Spigot start
+            new Thread("User Authenticator #" + ServerLoginPacketListenerImpl.f_10014_.incrementAndGet()) {
+
+               @Override
+               public void run() {
+                  try {
+                     new LoginHandler().fireEvents(createOfflineProfileSpigot(ServerLoginPacketListenerImpl.this.f_291165_));
+                  } catch (Exception ex) {
+                     disconnect("Failed to verify username!");
+                     f_10018_.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + ServerLoginPacketListenerImpl.this.f_291165_, ex);
+                  }
+               }
+            }.start();
+            // Spigot end
          }
 
       }
@@ -129,9 +_,11 @@
 
    private void m_294778_(GameProfile p_299507_) {
       PlayerList playerlist = this.f_10018_.m_6846_();
-      Component component = playerlist.m_6418_(this.f_10013_.m_129523_(), p_299507_);
-      if (component != null) {
-         this.m_10053_(component);
+      // CraftBukkit start - fire PlayerLoginEvent
+      this.player = playerlist.canPlayerLogin(this, p_299507_); // CraftBukkit
+      if (player == null) {
+         // this.disconnect(component);
+         // CraftBukkit end
       } else {
          if (this.f_10018_.m_6328_() >= 0 && !this.f_10013_.m_129531_()) {
             this.f_10013_.m_243124_(new ClientboundLoginCompressionPacket(this.f_10018_.m_6328_()), PacketSendListener.m_243092_(() -> {
@@ -139,7 +_,8 @@
             }));
          }
 
-         boolean flag = playerlist.m_292966_(p_299507_);
+         boolean flag = playerlist.disconnectAllPlayersWithProfile(p_299507_, this.player); // CraftBukkit - add player reference
+
          if (flag) {
             this.f_10019_ = ServerLoginPacketListenerImpl.State.WAITING_FOR_DUPE_DISCONNECT;
          } else {
@@ -180,19 +_,25 @@
          throw new IllegalStateException("Protocol error", cryptexception);
       }
 
-      Thread thread = new Thread("User Authenticator #" + f_10014_.incrementAndGet()) {
+      Thread thread = new Thread(net.minecraftforge.fml.util.thread.SidedThreadGroups.SERVER, "User Authenticator #" + f_10014_.incrementAndGet()) {
          public void run() {
             String s1 = Objects.requireNonNull(ServerLoginPacketListenerImpl.this.f_291165_, "Player name not initialized");
 
             try {
-               ProfileResult profileresult = ServerLoginPacketListenerImpl.this.f_10018_.m_129925_().hasJoinedServer(s1, s, this.m_10064_());
+               ProfileResult profileresult = ServerLoginPacketListenerImpl.this.f_10018_.m_129925_().hasJoinedServer(s1, s, this.getAddress());
                if (profileresult != null) {
                   GameProfile gameprofile = profileresult.profile();
-                  ServerLoginPacketListenerImpl.f_10015_.info("UUID of player {} is {}", gameprofile.getName(), gameprofile.getId());
-                  ServerLoginPacketListenerImpl.this.m_294008_(gameprofile);
+                  //ServerLoginPacketListenerImpl.this.state = ServerLoginPacketListenerImpl.State.NEGOTIATING; // FORGE: continue NEGOTIATING, we move to READY_TO_ACCEPT after Forge is ready
+
+                  // CraftBukkit start - fire PlayerPreLoginEvent
+                  if (!f_10013_.m_129536_()) {
+                     return;
+                  }
+
+                  new LoginHandler().fireEvents(gameprofile);
                } else if (ServerLoginPacketListenerImpl.this.f_10018_.m_129792_()) {
                   ServerLoginPacketListenerImpl.f_10015_.warn("Failed to verify username but will let them in anyway!");
-                  ServerLoginPacketListenerImpl.this.m_294008_(ServerLoginPacketListenerImpl.m_295545_(s1));
+                  ServerLoginPacketListenerImpl.this.m_294008_(ServerLoginPacketListenerImpl.this.createOfflineProfileSpigot(s1)); // Spigot
                } else {
                   ServerLoginPacketListenerImpl.this.m_10053_(Component.m_237115_("multiplayer.disconnect.unverified_username"));
                   ServerLoginPacketListenerImpl.f_10015_.error("Username '{}' tried to join with an invalid session", (Object)s1);
@@ -200,17 +_,22 @@
             } catch (AuthenticationUnavailableException authenticationunavailableexception) {
                if (ServerLoginPacketListenerImpl.this.f_10018_.m_129792_()) {
                   ServerLoginPacketListenerImpl.f_10015_.warn("Authentication servers are down but will let them in anyway!");
-                  ServerLoginPacketListenerImpl.this.m_294008_(ServerLoginPacketListenerImpl.m_295545_(s1));
+                  ServerLoginPacketListenerImpl.this.m_294008_(ServerLoginPacketListenerImpl.this.createOfflineProfileSpigot(s1)); // Spigot
                } else {
                   ServerLoginPacketListenerImpl.this.m_10053_(Component.m_237115_("multiplayer.disconnect.authservers_down"));
                   ServerLoginPacketListenerImpl.f_10015_.error("Couldn't verify username because servers are unavailable");
                }
+               // CraftBukkit start - catch all exceptions
+            } catch (Exception exception) {
+               disconnect("Failed to verify username!");
+               f_10018_.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + s1, exception);
+               // CraftBukkit end
             }
 
          }
 
          @Nullable
-         private InetAddress m_10064_() {
+         private InetAddress getAddress() {
             SocketAddress socketaddress = ServerLoginPacketListenerImpl.this.f_10013_.m_129523_();
             return ServerLoginPacketListenerImpl.this.f_10018_.m_129798_() && socketaddress instanceof InetSocketAddress ? ((InetSocketAddress)socketaddress).getAddress() : null;
          }
@@ -219,14 +_,58 @@
       thread.start();
    }
 
+   // Spigot start
+   public class LoginHandler {
+
+      public void fireEvents(GameProfile gameprofile) throws Exception {
+         String playerName = gameprofile.getName();
+         java.net.InetAddress address = ((java.net.InetSocketAddress) f_10013_.m_129523_()).getAddress();
+         java.util.UUID uniqueId = gameprofile.getId();
+         final org.bukkit.craftbukkit.v1_20_R2.CraftServer server = ServerLoginPacketListenerImpl.this.f_10018_.server;
+
+         org.bukkit.event.player.AsyncPlayerPreLoginEvent asyncEvent = new org.bukkit.event.player.AsyncPlayerPreLoginEvent(playerName, address, uniqueId);
+         server.getPluginManager().callEvent(asyncEvent);
+
+         if (org.bukkit.event.player.PlayerPreLoginEvent.getHandlerList().getRegisteredListeners().length != 0) {
+            final org.bukkit.event.player.PlayerPreLoginEvent event = new org.bukkit.event.player.PlayerPreLoginEvent(playerName, address, uniqueId);
+            if (asyncEvent.getResult() != org.bukkit.event.player.PlayerPreLoginEvent.Result.ALLOWED) {
+               event.disallow(asyncEvent.getResult(), asyncEvent.getKickMessage());
+            }
+            org.bukkit.craftbukkit.v1_20_R2.util.Waitable<org.bukkit.event.player.PlayerPreLoginEvent.Result> waitable = new org.bukkit.craftbukkit.v1_20_R2.util.Waitable<org.bukkit.event.player.PlayerPreLoginEvent.Result>() {
+               @Override
+               protected org.bukkit.event.player.PlayerPreLoginEvent.Result evaluate() {
+                  server.getPluginManager().callEvent(event);
+                  return event.getResult();
+               }};
+
+            ServerLoginPacketListenerImpl.this.f_10018_.processQueue.add(waitable);
+            if (waitable.get() != org.bukkit.event.player.PlayerPreLoginEvent.Result.ALLOWED) {
+               disconnect(event.getKickMessage());
+               return;
+            }
+         } else {
+            if (asyncEvent.getLoginResult() != org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result.ALLOWED) {
+               disconnect(asyncEvent.getKickMessage());
+               return;
+            }
+         }
+         // CraftBukkit end
+         ServerLoginPacketListenerImpl.f_10015_.info("UUID of player {} is {}", gameprofile.getName(), gameprofile.getId());
+         ServerLoginPacketListenerImpl.this.m_294008_(gameprofile);
+      }
+   }
+   // Spigot end
+
    public void m_10044_(ServerboundCustomQueryAnswerPacket p_297965_) {
+      if (!net.minecraftforge.network.NetworkHooks.onCustomPayload(p_297965_, this.f_10013_))
       this.m_10053_(f_291075_);
    }
 
    public void m_7223_(ServerboundLoginAcknowledgedPacket p_298815_) {
       Validate.validState(this.f_10019_ == ServerLoginPacketListenerImpl.State.PROTOCOL_SWITCHING, "Unexpected login acknowledgement packet");
       CommonListenerCookie commonlistenercookie = CommonListenerCookie.m_294081_(Objects.requireNonNull(this.f_291112_));
-      ServerConfigurationPacketListenerImpl serverconfigurationpacketlistenerimpl = new ServerConfigurationPacketListenerImpl(this.f_10018_, this.f_10013_, commonlistenercookie);
+      ServerConfigurationPacketListenerImpl serverconfigurationpacketlistenerimpl = new ServerConfigurationPacketListenerImpl(this.f_10018_, this.f_10013_, commonlistenercookie, this.player); // CraftBukkit
+
       this.f_10013_.m_129505_(serverconfigurationpacketlistenerimpl);
       serverconfigurationpacketlistenerimpl.m_294295_();
       this.f_10019_ = ServerLoginPacketListenerImpl.State.ACCEPTED;
@@ -235,6 +_,37 @@
    protected static GameProfile m_295545_(String p_297551_) {
       UUID uuid = UUIDUtil.m_235879_(p_297551_);
       return new GameProfile(uuid, p_297551_);
+   }
+
+   // Spigot start
+   @Nullable
+   public GameProfile getAuthenticatedProfile() {
+       return this.f_291112_;
+   }
+
+   protected GameProfile createOfflineProfileSpigot(String p_297551_) {
+      UUID uuid;
+      if ( f_10013_.spoofedUUID != null )
+      {
+         uuid = f_10013_.spoofedUUID;
+      } else
+      {
+         uuid = UUIDUtil.m_235879_( p_297551_ );
+      }
+
+      GameProfile gameProfile = new GameProfile( uuid, p_297551_ );
+
+      if (f_10013_.spoofedProfile != null)
+      {
+         for ( com.mojang.authlib.properties.Property property : f_10013_.spoofedProfile )
+         {
+            if ( !ServerHandshakePacketListenerImpl.PROP_PATTERN.matcher( property.name()).matches() ) continue;
+            gameProfile.getProperties().put( property.name(), property );
+         }
+      }
+
+      return gameProfile;
+      // Spigot end
    }
 
    static enum State {
