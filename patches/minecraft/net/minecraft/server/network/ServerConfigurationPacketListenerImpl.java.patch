--- a/net/minecraft/server/network/ServerConfigurationPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerConfigurationPacketListenerImpl.java
@@ -36,16 +_,23 @@
 public class ServerConfigurationPacketListenerImpl extends ServerCommonPacketListenerImpl implements TickablePacketListener, ServerConfigurationPacketListener {
    private static final Logger LOGGER = LogUtils.getLogger();
    private static final Component DISCONNECT_REASON_INVALID_DATA = Component.translatable("multiplayer.disconnect.invalid_player_data");
+   private static final ConfigurationTask.Type VANILLA_START = new ConfigurationTask.Type("vanilla_start");
    private final GameProfile gameProfile;
    private final Queue<ConfigurationTask> configurationTasks = new ConcurrentLinkedQueue<>();
    @Nullable
    private ConfigurationTask currentTask;
    private ClientInformation clientInformation;
+   private final net.minecraftforge.network.config.ConfigurationTaskContext taskContext;
 
    public ServerConfigurationPacketListenerImpl(MinecraftServer p_301415_, Connection p_298106_, CommonListenerCookie p_301309_) {
-      super(p_301415_, p_298106_, p_301309_);
+      this(p_301415_, p_298106_, p_301309_, new ServerPlayer(p_301415_, p_301415_.overworld(), p_301309_.gameProfile(), p_301309_.clientInformation()));
+
+   }
+   public ServerConfigurationPacketListenerImpl(MinecraftServer p_301415_, Connection p_298106_, CommonListenerCookie p_301309_, ServerPlayer player) { // CraftBukkit
+      super(p_301415_, p_298106_, p_301309_, player); // CraftBukkit
       this.gameProfile = p_301309_.gameProfile();
       this.clientInformation = p_301309_.clientInformation();
+      this.taskContext = new net.minecraftforge.network.config.ConfigurationTaskContext(p_298106_, this::send, this::finishCurrentTask);
    }
 
    protected GameProfile playerProfile() {
@@ -61,12 +_,17 @@
       return this.connection.isConnected();
    }
 
-   public void startConfiguration() {
+   private void vanillaStart() {
       this.send(new ClientboundCustomPayloadPacket(new BrandPayload(this.server.getServerModName())));
       LayeredRegistryAccess<RegistryLayer> layeredregistryaccess = this.server.registries();
       this.send(new ClientboundUpdateEnabledFeaturesPacket(FeatureFlags.REGISTRY.toNames(this.server.getWorldData().enabledFeatures())));
       this.send(new ClientboundRegistryDataPacket((new RegistryAccess.ImmutableRegistryAccess(RegistrySynchronization.networkedRegistries(layeredregistryaccess))).freeze()));
       this.send(new ClientboundUpdateTagsPacket(TagNetworkSerialization.serializeTagsToNetwork(layeredregistryaccess)));
+   }
+
+   public void startConfiguration() {
+      net.minecraftforge.event.ForgeEventFactory.gatherLoginConfigTasks(this.connection, this.configurationTasks::add);
+      this.configurationTasks.add(new net.minecraftforge.network.config.SimpleConfigurationTask(VANILLA_START, this::vanillaStart));
       this.addOptionalTasks();
       this.configurationTasks.add(new JoinWorldTask());
       this.startNextTask();
@@ -107,13 +_,14 @@
             return;
          }
 
-         Component component = playerlist.canPlayerLogin(this.connection.getRemoteAddress(), this.gameProfile);
+         Component component = null; // CraftBukkit - login checks already completed
+
          if (component != null) {
             this.disconnect(component);
             return;
          }
 
-         ServerPlayer serverplayer = playerlist.getPlayerForLogin(this.gameProfile, this.clientInformation);
+         ServerPlayer serverplayer = playerlist.getPlayerForLogin(this.gameProfile, this.clientInformation, this.player); // CraftBukkit
          playerlist.placeNewPlayer(this.connection, serverplayer, this.createCookie(this.clientInformation));
          this.connection.resumeInboundAfterProtocolChange();
       } catch (Exception exception) {
@@ -135,7 +_,7 @@
          ConfigurationTask configurationtask = this.configurationTasks.poll();
          if (configurationtask != null) {
             this.currentTask = configurationtask;
-            configurationtask.start(this::send);
+            configurationtask.start(this.taskContext);
          }
 
       }
