--- a/net/minecraft/server/Main.java
+++ b/net/minecraft/server/Main.java
@@ -57,6 +_,26 @@
 import net.minecraft.world.level.storage.PrimaryLevelData;
 import net.minecraft.world.level.storage.WorldData;
 import org.slf4j.Logger;
+
+//Ketting Start 
+import com.google.common.base.Charsets;
+import java.io.InputStreamReader;
+import java.util.List;
+import java.util.concurrent.atomic.AtomicReference;
+import net.minecraft.server.packs.PackType;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.fusesource.jansi.AnsiConsole;
+import org.kettingpowered.ketting.adapters.Bukkit_1_20_2_Adapter;
+import org.kettingpowered.ketting.adapters.DimensionRegistry_1_20_2_Adapter;
+import org.kettingpowered.ketting.adapters.Forge_1_20_2_Adapter;
+import org.kettingpowered.ketting.config.KettingConfig;
+import org.kettingpowered.ketting.core.Ketting;
+import org.kettingpowered.ketting.core.injectprotect.InjectProtect;
 import org.slf4j.Logger;
+import org.spongepowered.asm.mixin.throwables.MixinError;
+
+import static java.util.Arrays.asList;
+//Ketting end
 
 public class Main {
    private static final Logger LOGGER = LogUtils.getLogger();
@@ -80,13 +_,51 @@
       OptionSpec<Void> optionspec12 = optionparser.accepts("jfrProfile");
       OptionSpec<Path> optionspec13 = optionparser.accepts("pidFile").withRequiredArg().withValuesConvertedBy(new PathConverter());
       OptionSpec<String> optionspec14 = optionparser.nonOptions();
+      optionparser.accepts("allowUpdates").withRequiredArg().ofType(Boolean.class).defaultsTo(Boolean.TRUE); // Forge: allow mod updates to proceed
+      optionparser.accepts("gameDir").withRequiredArg().ofType(File.class).defaultsTo(new File(".")); //Forge: Consume this argument, we use it in the launcher, and the client side.
+      final OptionSpec<net.minecraft.core.BlockPos> spawnPosOpt;
+      boolean gametestEnabled = Boolean.getBoolean("forge.gameTestServer");
+      if (gametestEnabled) {
+         spawnPosOpt = optionparser.accepts("spawnPos").withRequiredArg().withValuesConvertedBy(new net.minecraftforge.gametest.BlockPosValueConverter()).defaultsTo(new net.minecraft.core.BlockPos(0, 60, 0));
+      } else {
+          spawnPosOpt = null;
+      }
+
+      //Ketting start - Bukkit Options
+      acceptBukkitSettings(optionparser);
+      //Ketting end
+
+      //Ketting start - Initialize Ketting
+      Ketting ketting = Ketting.init(SharedConstants.getCurrentVersion().getName());
+      ketting.registerAdapter(new Forge_1_20_2_Adapter(), new Bukkit_1_20_2_Adapter());
+      //Ketting end
 
       try {
          OptionSet optionset = optionparser.parse(p_129699_);
+         //Ketting start - Bukkit Options
+         bukkitSettings(optionset);
+         //Ketting end
          if (optionset.has(optionspec7)) {
             optionparser.printHelpOn(System.err);
             return;
          }
+         Path path2 = Paths.get("eula.txt");
+         Eula eula = new Eula(path2);
+
+         // Spigot Start
+         boolean eulaAgreed = Boolean.getBoolean( "com.mojang.eula.agree" );
+         if ( eulaAgreed )
+         {
+            System.err.println( "You have used the Spigot command line EULA agreement flag." );
+            System.err.println( "By using this setting you are indicating your agreement to Mojang's EULA (https://account.mojang.com/documents/minecraft_eula)." );
+            System.err.println( "If you do not agree to the above EULA please stop your server and remove this flag immediately." );
+         }
+         // Spigot End
+
+         if (!eula.hasAgreedToEULA() && !eulaAgreed) { // Spigot
+            LOGGER.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
+            return;
+         }
 
          Path path = optionset.valueOf(optionspec13);
          if (path != null) {
@@ -98,20 +_,50 @@
             JvmProfiler.INSTANCE.start(Environment.SERVER);
          }
 
-         Bootstrap.bootStrap();
+         //Ketting start
+         try {
+            Bootstrap.bootStrap();
+         } catch (MixinError mixin) {
+            InjectProtect.onBootErrorCaught(mixin);
+         }
+         //Ketting end
          Bootstrap.validate();
+
+         //Ketting start - init dimension registry after bootstrap
+         ketting.registerDimensionRegistry(new DimensionRegistry_1_20_2_Adapter());
+         //Ketting end
+
          Util.startTimerHackThread();
          Path path1 = Paths.get("server.properties");
-         DedicatedServerSettings dedicatedserversettings = new DedicatedServerSettings(path1);
+         if (!optionset.has(optionspec1)) net.minecraftforge.server.loading.ServerModLoader.load(); // Load mods before we load almost anything else anymore. Single spot now. Only loads if they haven't passed the initserver param
+         DedicatedServerSettings dedicatedserversettings = new DedicatedServerSettings(optionset); // CraftBukkit - CLI argument support
          dedicatedserversettings.forceSave();
+         if (false) {//Ketting start - We handle the eula in our launcher
          Path path2 = Paths.get("eula.txt");
          Eula eula = new Eula(path2);
+         }
+         KettingConfig.getInstance(); 
+         // Ketting end
          if (optionset.has(optionspec1)) {
+            // CraftBukkit start - SPIGOT-5761: Create bukkit.yml and commands.yml if not present
+            File configFile = (File) optionset.valueOf("bukkit-settings");
+            YamlConfiguration configuration = YamlConfiguration.loadConfiguration(configFile);
+            configuration.options().copyDefaults(true);
+            configuration.setDefaults(YamlConfiguration.loadConfiguration(new InputStreamReader(Main.class.getClassLoader().getResourceAsStream("configurations/bukkit.yml"), Charsets.UTF_8)));
+            configuration.save(configFile);
+
+            File commandFile = (File) optionset.valueOf("commands-settings");
+            YamlConfiguration commandsConfiguration = YamlConfiguration.loadConfiguration(commandFile);
+            commandsConfiguration.options().copyDefaults(true);
+            commandsConfiguration.setDefaults(YamlConfiguration.loadConfiguration(new InputStreamReader(Main.class.getClassLoader().getResourceAsStream("configurations/commands.yml"), Charsets.UTF_8)));
+            commandsConfiguration.save(commandFile);
+            // CraftBukkit end
             LOGGER.info("Initialized '{}' and '{}'", path1.toAbsolutePath(), path2.toAbsolutePath());
             return;
          }
 
+         if (false) //Ketting - EULA is handled in our launcher  
          if (!eula.hasAgreedToEULA()) {
             LOGGER.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
             return;
          }
@@ -119,9 +_,14 @@ 
          File file1 = new File(optionset.valueOf(optionspec8));
          Services services = Services.create(new YggdrasilAuthenticationService(Proxy.NO_PROXY), file1);
          String s = Optional.ofNullable(optionset.valueOf(optionspec9)).orElse(dedicatedserversettings.getProperties().levelName);
+         if (s == null || s.isEmpty() || new File(file1, s).getAbsolutePath().equals(new File(s).getAbsolutePath())) {
+            LOGGER.error("Invalid world directory specified, must not be null, empty or the same directory as your universe! " + s);
+            return;
+         }
          LevelStorageSource levelstoragesource = LevelStorageSource.createDefault(file1.toPath());
-         LevelStorageSource.LevelStorageAccess levelstoragesource$levelstorageaccess = levelstoragesource.validateAndCreateAccess(s);
+         LevelStorageSource.LevelStorageAccess levelstoragesource$levelstorageaccess = levelstoragesource.validateAndCreateAccess(s, LevelStem.OVERWORLD);
+         levelstoragesource$levelstorageaccess.readAdditionalLevelSaveData();
          Dynamic<?> dynamic;
          if (levelstoragesource$levelstorageaccess.hasWorldData()) {
             LevelSummary levelsummary;
             try {
@@ -165,11 +_,33 @@
 
          PackRepository packrepository = ServerPacksSource.createPackRepository(levelstoragesource$levelstorageaccess);
 
+         // CraftBukkit start
+         File bukkitDataPackFolder = new File(levelstoragesource$levelstorageaccess.getLevelPath(LevelResource.DATAPACK_DIR).toFile(), "bukkit");
+         if (!bukkitDataPackFolder.exists()) {
+            bukkitDataPackFolder.mkdirs();
+         }
+         File mcMeta = new File(bukkitDataPackFolder, "pack.mcmeta");
+         try {
+            com.google.common.io.Files.write("{\n"
+                    + "    \"pack\": {\n"
+                    + "        \"description\": \"Data pack for resources provided by Bukkit plugins\",\n"
+                    + "        \"pack_format\": " + SharedConstants.getCurrentVersion().getPackVersion(PackType.SERVER_DATA) + "\n"
+                    + "    }\n"
+                    + "}\n", mcMeta, com.google.common.base.Charsets.UTF_8);
+         } catch (java.io.IOException ex) {
+            throw new RuntimeException("Could not initialize Bukkit datapack", ex);
+         }
+         AtomicReference<WorldLoader.DataLoadContext> worldLoader = new AtomicReference<>();
+         // CraftBukkit end
+
+         if (dynamic != null)
+             net.minecraftforge.common.ForgeHooks.readAdditionalLevelSaveData(dynamic, levelstoragesource$levelstorageaccess.getLevelDirectory());
          WorldStem worldstem;
          try {
             WorldLoader.InitConfig worldloader$initconfig = loadOrCreateConfig(dedicatedserversettings.getProperties(), dynamic1, flag, packrepository);
             worldstem = Util.blockUntilDone((p_248086_) -> {
                return WorldLoader.load(worldloader$initconfig, (p_308589_) -> {
+                  worldLoader.set(p_248079_); // CraftBukkit
                   Registry<LevelStem> registry = p_308589_.datapackDimensions().registryOrThrow(Registries.LEVEL_STEM);
                   if (dynamic1 != null) {
                      LevelDataAndDimensions leveldataanddimensions = LevelStorageSource.getLevelDataAndDimensions(dynamic1, p_308589_.dataConfiguration(), registry, p_308589_.datapackWorldgen());
@@ -190,6 +_,9 @@
                         worlddimensions = dedicatedserverproperties.createDimensions(p_308589_.datapackWorldgen());
                      }
 
+                     //Forge: Do a write-read-cycle to inject modded dimensions on first start of a dedicated server into its generated world dimensions list.
+                     net.minecraft.resources.RegistryOps<net.minecraft.nbt.Tag> dynamicops = net.minecraft.resources.RegistryOps.create(net.minecraft.nbt.NbtOps.INSTANCE, p_308589_.datapackWorldgen());
+                     worlddimensions = WorldDimensions.CODEC.encoder().encodeStart(dynamicops, worlddimensions).flatMap((writtenPayloadWithModdedDimensions) -> WorldDimensions.CODEC.decoder().parse(dynamicops, writtenPayloadWithModdedDimensions)).resultOrPartial(LOGGER::error).orElse(worlddimensions);
                      WorldDimensions.Complete worlddimensions$complete = worlddimensions.bake(registry);
                      Lifecycle lifecycle = worlddimensions$complete.lifecycle().add(p_308589_.datapackWorldgen().allRegistriesLifecycle());
                      return new WorldLoader.DataLoadOutput<>(new PrimaryLevelData(levelsettings, worldoptions, worlddimensions$complete.specialWorldProperty(), lifecycle), worlddimensions$complete.dimensionsRegistryAccess());
@@ -210,21 +_,38 @@
 
          WorldData worlddata = worldstem.worldData();
          levelstoragesource$levelstorageaccess.saveDataTag(registryaccess$frozen, worlddata);
-         final DedicatedServer dedicatedserver = MinecraftServer.spin((p_296433_) -> {
-            DedicatedServer dedicatedserver1 = new DedicatedServer(p_296433_, levelstoragesource$levelstorageaccess, packrepository, worldstem, dedicatedserversettings, DataFixers.getDataFixer(), services, LoggerChunkProgressListener::new);
+         final MinecraftServer dedicatedserver = MinecraftServer.spin((p_129697_) -> {
+            MinecraftServer dedicatedserver1;
+            if (gametestEnabled) {
+               net.minecraftforge.gametest.ForgeGameTestHooks.registerGametests();
+               var testBatches = net.minecraft.gametest.framework.GameTestRunner.groupTestsIntoBatches(net.minecraft.gametest.framework.GameTestRegistry.getAllTestFunctions());
+               var spawnPos = optionset.valueOf(spawnPosOpt);
+               dedicatedserver1 = new net.minecraft.gametest.framework.GameTestServer(p_129697_, levelstoragesource$levelstorageaccess, packrepository, worldstem, testBatches, spawnPos);
+            } else {
+               dedicatedserver1 = new DedicatedServer(p_129697_, levelstoragesource$levelstorageaccess, packrepository, worldstem, dedicatedserversettings, DataFixers.getDataFixer(), services, LoggerChunkProgressListener::new);
+            }
+            //Ketting start - add optionset and worldloader
+            dedicatedserver1.setBukkitOptions(optionset, worldLoader.get());
+            //Ketting end
             dedicatedserver1.setPort(optionset.valueOf(optionspec10));
             dedicatedserver1.setDemo(optionset.has(optionspec2));
             dedicatedserver1.setId(optionset.valueOf(optionspec11));
             boolean flag1 = !optionset.has(optionspec) && !optionset.valuesOf(optionspec14).contains("nogui");
-            if (flag1 && !GraphicsEnvironment.isHeadless()) {
-               dedicatedserver1.showGui();
+            if (dedicatedserver1 instanceof DedicatedServer dedicatedServer && flag1 && !GraphicsEnvironment.isHeadless()) {
+               dedicatedServer.showGui();
             }
 
             return dedicatedserver1;
          });
          Thread thread = new Thread("Server Shutdown Thread") {
             public void run() {
+               //Ketting start - InjectProtect
+               InjectProtect.shutdownCalled();
+               //Ketting end
+               // FORGE: Halting as GameTestServer will cause issues as it always calls System#exit on both crash and normal exit, so skip it
+               if (!(dedicatedserver instanceof net.minecraft.gametest.framework.GameTestServer))
                dedicatedserver.halt(true);
+               org.apache.logging.log4j.LogManager.shutdown(); // we're manually managing the logging shutdown on the server. Make sure we do it here at the end.
             }
          };
          thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
@@ -235,6 +_,64 @@
 
    }
 
+   //Ketting start - Bukkit Options
+   private static void acceptBukkitSettings(OptionParser parser) {
+      parser.acceptsAll(asList("nojline"), "Disables jline and emulates the vanilla console");
+      parser.acceptsAll(asList("noconsole"), "Disables the console");
+      parser.acceptsAll(asList("b", "bukkit-settings"), "File for bukkit settings")
+              .withRequiredArg()
+              .ofType(File.class)
+              .defaultsTo(new File("bukkit.yml"))
+              .describedAs("Yml file");
+      parser.acceptsAll(asList("C", "commands-settings"), "File for command settings")
+              .withRequiredArg()
+              .ofType(File.class)
+              .defaultsTo(new File("commands.yml"))
+              .describedAs("Yml file");
+      // Spigot Start
+      parser.acceptsAll(asList("S", "spigot-settings"), "File for spigot settings")
+              .withRequiredArg()
+              .ofType(File.class)
+              .defaultsTo(new File("spigot.yml"))
+              .describedAs("Yml file");
+      // Spigot End
+      parser.acceptsAll(asList("c", "config"), "Properties file to use")
+              .withRequiredArg()
+              .ofType(File.class)
+              .defaultsTo(new File("server.properties"))
+              .describedAs("Properties file");
+      parser.acceptsAll(asList("P", "plugins"), "Plugin directory to use")
+              .withRequiredArg()
+              .ofType(File.class)
+              .defaultsTo(new File("plugins"))
+              .describedAs("Plugin directory");
+   }
+
+   private static void bukkitSettings(OptionSet options) {
+      // This trick bypasses Maven Shade's clever rewriting of our getProperty call when using String literals
+      String jline_UnsupportedTerminal = new String(new char[]{'j', 'l', 'i', 'n', 'e', '.', 'U', 'n', 's', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'T', 'e', 'r', 'm', 'i', 'n', 'a', 'l'});
+      String jline_terminal = new String(new char[]{'j', 'l', 'i', 'n', 'e', '.', 't', 'e', 'r', 'm', 'i', 'n', 'a', 'l'});
+
+      org.bukkit.craftbukkit.Main.useJline = !(jline_UnsupportedTerminal).equals(System.getProperty(jline_terminal));
+
+      if (options.has("nojline")) {
+         System.setProperty("user.language", "en");
+         org.bukkit.craftbukkit.Main.useJline = false;
+      }
+
+      if (org.bukkit.craftbukkit.Main.useJline) {
+         AnsiConsole.systemInstall();
+      } else {
+         // This ensures the terminal literal will always match the jline implementation
+         System.setProperty(jline.TerminalFactory.JLINE_TERMINAL, jline.UnsupportedTerminal.class.getName());
+      }
+
+      if (options.has("noconsole")) {
+         org.bukkit.craftbukkit.Main.useConsole = false;
+      }
+   }
+   //Ketting end
+
    private static void writePidFile(Path p_270192_) {
       try {
          long i = ProcessHandle.current().pid();
@@ -260,7 +_,7 @@
       return new WorldLoader.InitConfig(worldloader$packconfig, Commands.CommandSelection.DEDICATED, p_248563_.functionPermissionLevel);
    }
 
-   private static void forceUpgrade(LevelStorageSource.LevelStorageAccess p_195489_, DataFixer p_195490_, boolean p_195491_, BooleanSupplier p_195492_, Registry<LevelStem> p_250443_) {
+   public static void forceUpgrade(LevelStorageSource.LevelStorageAccess p_195489_, DataFixer p_195490_, boolean p_195491_, BooleanSupplier p_195492_, Registry<LevelStem> p_250443_) {
       LOGGER.info("Forcing world upgrade!");
       WorldUpgrader worldupgrader = new WorldUpgrader(p_195489_, p_195490_, p_250443_, p_195491_);
       Component component = null;
