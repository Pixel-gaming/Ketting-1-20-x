--- a/net/minecraft/world/entity/boss/wither/WitherBoss.java
+++ b/net/minecraft/world/entity/boss/wither/WitherBoss.java
@@ -9,10 +_,13 @@
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.chat.Component;
+import net.minecraft.network.protocol.game.ClientboundLevelEventPacket;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerBossEvent;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
@@ -49,10 +_,14 @@
 import net.minecraft.world.entity.projectile.AbstractArrow;
 import net.minecraft.world.entity.projectile.WitherSkull;
 import net.minecraft.world.item.Items;
-import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.Vec3;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityRegainHealthEvent;
+import org.bukkit.event.entity.EntityTargetEvent;
+import org.bukkit.event.entity.ExplosionPrimeEvent;
 
 public class WitherBoss extends Monster implements PowerableMob, RangedAttackMob {
    private static final EntityDataAccessor<Integer> DATA_TARGET_A = SynchedEntityData.defineId(WitherBoss.class, EntityDataSerializers.INT);
@@ -68,7 +_,7 @@
    private final int[] nextHeadUpdate = new int[2];
    private final int[] idleHeadUpdates = new int[2];
    private int destroyBlocksTick;
-   private final ServerBossEvent bossEvent = (ServerBossEvent)(new ServerBossEvent(this.getDisplayName(), BossEvent.BossBarColor.PURPLE, BossEvent.BossBarOverlay.PROGRESS)).setDarkenScreen(true);
+   public final ServerBossEvent bossEvent = (ServerBossEvent)(new ServerBossEvent(this.getDisplayName(), BossEvent.BossBarColor.PURPLE, BossEvent.BossBarOverlay.PROGRESS)).setDarkenScreen(true);
    private static final Predicate<LivingEntity> LIVING_ENTITY_SELECTOR = (p_31504_) -> {
       return p_31504_.getMobType() != MobType.UNDEAD && p_31504_.attackable();
    };
@@ -219,15 +_,40 @@
          int k1 = this.getInvulnerableTicks() - 1;
          this.bossEvent.setProgress(1.0F - (float)k1 / 220.0F);
          if (k1 <= 0) {
-            this.level().explode(this, this.getX(), this.getEyeY(), this.getZ(), 7.0F, false, Level.ExplosionInteraction.MOB);
+            // CraftBukkit start
+            // this.level().explode(this, this.getX(), this.getEyeY(), this.getZ(), 7.0F, false, Level.ExplosionInteraction.MOB);
+            ExplosionPrimeEvent event = new ExplosionPrimeEvent(this.getBukkitEntity(), 7.0F, false);
+            this.level().getCraftServer().getPluginManager().callEvent(event);
+
+            if (!event.isCancelled()) {
+               this.level().explode(this, this.getX(), this.getEyeY(), this.getZ(), event.getRadius(), event.getFire(), Level.ExplosionInteraction.MOB);
+            }
+            // CraftBukkit end
+
             if (!this.isSilent()) {
-               this.level().globalLevelEvent(1023, this.blockPosition(), 0);
+               // CraftBukkit start - Use relative location for far away sounds
+               // this.level().globalLevelEvent(1023, new BlockPosition(this), 0);
+               int viewDistance = ((ServerLevel) this.level()).getCraftServer().getViewDistance() * 16;
+               for (ServerPlayer player : MinecraftServer.getServer().getPlayerList().players) {
+                  double deltaX = this.getX() - player.getX();
+                  double deltaZ = this.getZ() - player.getZ();
+                  double distanceSquared = deltaX * deltaX + deltaZ * deltaZ;
+                  if (distanceSquared > viewDistance * viewDistance) {
+                     double deltaLength = Math.sqrt(distanceSquared);
+                     double relativeX = player.getX() + (deltaX / deltaLength) * viewDistance;
+                     double relativeZ = player.getZ() + (deltaZ / deltaLength) * viewDistance;
+                     player.connection.send(new ClientboundLevelEventPacket(1023, new BlockPos((int) relativeX, (int) this.getY(), (int) relativeZ), 0, true));
+                  } else {
+                     player.connection.send(new ClientboundLevelEventPacket(1023, this.blockPosition(), 0, true));
+                  }
+               }
+               // CraftBukkit end
             }
          }
 
          this.setInvulnerableTicks(k1);
          if (this.tickCount % 10 == 0) {
-            this.heal(10.0F);
+            this.heal(10.0F, EntityRegainHealthEvent.RegainReason.WITHER_SPAWN); // CraftBukkit
          }
 
       } else {
@@ -265,6 +_,8 @@
                   List<LivingEntity> list = this.level().getNearbyEntities(LivingEntity.class, TARGETING_CONDITIONS, this, this.getBoundingBox().inflate(20.0D, 8.0D, 20.0D));
                   if (!list.isEmpty()) {
                      LivingEntity livingentity1 = list.get(this.random.nextInt(list.size()));
+
+                     if (CraftEventFactory.callEntityTargetLivingEvent(this, livingentity1, EntityTargetEvent.TargetReason.CLOSEST_ENTITY).isCancelled()) continue; // CraftBukkit
                      this.setAlternativeTarget(i, livingentity1.getId());
                   }
                }
@@ -279,7 +_,7 @@
 
          if (this.destroyBlocksTick > 0) {
             --this.destroyBlocksTick;
-            if (this.destroyBlocksTick == 0 && this.level().getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
+            if (this.destroyBlocksTick == 0 && net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(this.level(), this)) {
                int j1 = Mth.floor(this.getY());
                int i2 = Mth.floor(this.getX());
                int j2 = Mth.floor(this.getZ());
@@ -293,7 +_,12 @@
                         int i1 = j2 + k2;
                         BlockPos blockpos = new BlockPos(l2, l, i1);
                         BlockState blockstate = this.level().getBlockState(blockpos);
-                        if (canDestroy(blockstate)) {
+                        if (blockstate.canEntityDestroy(this.level(), blockpos, this) && net.minecraftforge.event.ForgeEventFactory.onEntityDestroyBlock(this, blockpos, blockstate)) {
+                           // CraftBukkit start
+                           if (!CraftEventFactory.callEntityChangeBlockEvent(this, blockpos, Blocks.AIR.defaultBlockState())) {
+                              continue;
+                           }
+                           // CraftBukkit end
                            flag = this.level().destroyBlock(blockpos, true, this) || flag;
                         }
                      }
@@ -307,13 +_,17 @@
          }
 
          if (this.tickCount % 20 == 0) {
-            this.heal(1.0F);
+            this.heal(1.0F, EntityRegainHealthEvent.RegainReason.REGEN); // CraftBukkit
          }
 
          this.bossEvent.setProgress(this.getHealth() / this.getMaxHealth());
       }
    }
 
+   /**
+    * @deprecated Forge: Use {@link BlockState#canEntityDestroy(net.minecraft.world.level.BlockGetter, BlockPos, Entity)} instead.
+    */
+   @Deprecated
    public static boolean canDestroy(BlockState p_31492_) {
       return !p_31492_.isAir() && !p_31492_.is(BlockTags.WITHER_IMMUNE);
    }
