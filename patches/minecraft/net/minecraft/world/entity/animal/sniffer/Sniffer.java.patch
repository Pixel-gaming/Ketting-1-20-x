--- a/net/minecraft/world/entity/animal/sniffer/Sniffer.java
+++ b/net/minecraft/world/entity/animal/sniffer/Sniffer.java
@@ -81,14 +_,23 @@
 
    public Sniffer(EntityType<? extends Animal> p_273717_, Level p_273562_) {
       super(p_273717_, p_273562_);
-      this.entityData.define(DATA_STATE, Sniffer.State.IDLING);
-      this.entityData.define(DATA_DROP_SEED_AT_TICK, 0);
+      //this.entityData.define(DATA_STATE, Sniffer.State.IDLING); // CraftBukkit - moved down to appropriate location
+      //this.entityData.define(DATA_DROP_SEED_AT_TICK, 0); // CraftBukkit - moved down to appropriate location
       this.getNavigation().setCanFloat(true);
       this.setPathfindingMalus(BlockPathTypes.WATER, -1.0F);
       this.setPathfindingMalus(BlockPathTypes.DANGER_POWDER_SNOW, -1.0F);
       this.setPathfindingMalus(BlockPathTypes.DAMAGE_CAUTIOUS, -1.0F);
    }
 
+   // CraftBukkit start - SPIGOT-7295: moved from constructor to appropriate location
+   @Override
+   protected void defineSynchedData() {
+      super.defineSynchedData();
+      this.entityData.define(Sniffer.DATA_STATE, Sniffer.State.IDLING);
+      this.entityData.define(Sniffer.DATA_DROP_SEED_AT_TICK, 0);
+   }
+   // CraftBukkit end
+
    protected float getStandingEyeHeight(Pose p_272721_, EntityDimensions p_273353_) {
       return this.getDimensions(p_272721_).height * 0.6F;
    }
@@ -134,7 +_,7 @@
       return this.position().add(this.getForward().scale(2.25D));
    }
 
-   private Sniffer.State getState() {
+   public Sniffer.State getState() {
       return this.entityData.get(DATA_STATE);
    }
 
@@ -227,7 +_,7 @@
       return this;
    }
 
-   Optional<BlockPos> calculateDigPosition() {
+   public Optional<BlockPos> calculateDigPosition() {
       return IntStream.range(0, 5).mapToObj((p_273771_) -> {
          return LandRandomPos.getPos(this, 10 + 2 * p_273771_, 3);
       }).filter(Objects::nonNull).map(BlockPos::containing).filter((p_309183_) -> {
@@ -235,7 +_,7 @@
       }).map(BlockPos::below).filter(this::canDig).findFirst();
    }
 
-   boolean canDig() {
+   public boolean canDig() {
       return !this.isPanicking() && !this.isTempted() && !this.isBaby() && !this.isInWater() && this.onGround() && !this.isPassenger() && this.canDig(this.getHeadBlock().below());
    }
 
@@ -255,6 +_,14 @@
 
          for(ItemStack itemstack : list) {
             ItemEntity itementity = new ItemEntity(serverlevel, (double)blockpos.getX(), (double)blockpos.getY(), (double)blockpos.getZ(), itemstack);
+            // CraftBukkit start - handle EntityDropItemEvent
+            org.bukkit.event.entity.EntityDropItemEvent event = new org.bukkit.event.entity.EntityDropItemEvent(this.getBukkitEntity(), (org.bukkit.entity.Item) itementity.getBukkitEntity());
+            org.bukkit.Bukkit.getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+               continue;
+            }
+            // CraftBukkit end
+
             itementity.setDefaultPickUpDelay();
             serverlevel.addFreshEntity(itementity);
          }
@@ -275,7 +_,7 @@
             }
 
             if (this.tickCount % 10 == 0) {
-               this.level().playLocalSound(this.getX(), this.getY(), this.getZ(), blockstate.getSoundType().getHitSound(), this.getSoundSource(), 0.5F, 0.5F, false);
+               this.level().playLocalSound(this.getX(), this.getY(), this.getZ(), blockstate.getSoundType(level(), blockpos.below(), this).getHitSound(), this.getSoundSource(), 0.5F, 0.5F, false);
             }
          }
       }
@@ -287,14 +_,14 @@
       return this;
    }
 
-   private Sniffer storeExploredPosition(BlockPos p_273015_) {
+   public Sniffer storeExploredPosition(BlockPos p_273015_) {
       List<GlobalPos> list = this.getExploredPositions().limit(20L).collect(Collectors.toList());
       list.add(0, GlobalPos.of(this.level().dimension(), p_273015_));
       this.getBrain().setMemory(MemoryModuleType.SNIFFER_EXPLORED_POSITIONS, list);
       return this;
    }
 
-   private Stream<GlobalPos> getExploredPositions() {
+   public Stream<GlobalPos> getExploredPositions() {
       return this.getBrain().getMemory(MemoryModuleType.SNIFFER_EXPLORED_POSITIONS).stream().flatMap(Collection::stream);
    }
 
