--- a/net/minecraft/world/entity/animal/horse/SkeletonTrapGoal.java
+++ b/net/minecraft/world/entity/animal/horse/SkeletonTrapGoal.java
@@ -28,34 +_,38 @@
 
    public void tick() {
       ServerLevel serverlevel = (ServerLevel)this.horse.level();
-      DifficultyInstance difficultyinstance = serverlevel.getCurrentDifficultyAt(this.horse.blockPosition());
-      this.horse.setTrap(false);
-      this.horse.setTamed(true);
-      this.horse.setAge(0);
-      LightningBolt lightningbolt = EntityType.LIGHTNING_BOLT.create(serverlevel);
-      if (lightningbolt != null) {
-         lightningbolt.moveTo(this.horse.getX(), this.horse.getY(), this.horse.getZ());
-         lightningbolt.setVisualOnly(true);
-         serverlevel.addFreshEntity(lightningbolt);
-         Skeleton skeleton = this.createSkeleton(difficultyinstance, this.horse);
-         if (skeleton != null) {
-            skeleton.startRiding(this.horse);
-            serverlevel.addFreshEntityWithPassengers(skeleton);
+      // Forge: Trigger the trap in a tick task to avoid crashes when mods add goals to skeleton horses
+      // (MC-206338/Forge PR #7509)
+      serverlevel.getServer().tell(new net.minecraft.server.TickTask(serverlevel.getServer().getTickCount(), () -> {
+         if (!this.horse.isAlive()) return;
+         DifficultyInstance difficultyinstance = serverlevel.getCurrentDifficultyAt(this.horse.blockPosition());
+         this.horse.setTrap(false);
+         this.horse.setTamed(true);
+         this.horse.setAge(0);
+         LightningBolt lightningbolt = EntityType.LIGHTNING_BOLT.create(serverlevel);
+         if (lightningbolt != null) {
+            lightningbolt.moveTo(this.horse.getX(), this.horse.getY(), this.horse.getZ());
+            lightningbolt.setVisualOnly(true);
+            serverlevel.strikeLightning(lightningbolt, org.bukkit.event.weather.LightningStrikeEvent.Cause.TRAP); // CraftBukkit
+            Skeleton skeleton = this.createSkeleton(difficultyinstance, this.horse);
+            if (skeleton != null) {
+               skeleton.startRiding(this.horse);
+               serverlevel.addFreshEntityWithPassengers(skeleton, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.TRAP); // CraftBukkit
 
-            for(int i = 0; i < 3; ++i) {
-               AbstractHorse abstracthorse = this.createHorse(difficultyinstance);
-               if (abstracthorse != null) {
-                  Skeleton skeleton1 = this.createSkeleton(difficultyinstance, abstracthorse);
-                  if (skeleton1 != null) {
-                     skeleton1.startRiding(abstracthorse);
-                     abstracthorse.push(this.horse.getRandom().triangle(0.0D, 1.1485D), 0.0D, this.horse.getRandom().triangle(0.0D, 1.1485D));
-                     serverlevel.addFreshEntityWithPassengers(abstracthorse);
+               for(int i = 0; i < 3; ++i) {
+                  AbstractHorse abstracthorse = this.createHorse(difficultyinstance);
+                  if (abstracthorse != null) {
+                     Skeleton skeleton1 = this.createSkeleton(difficultyinstance, abstracthorse);
+                     if (skeleton1 != null) {
+                        skeleton1.startRiding(abstracthorse);
+                        abstracthorse.push(this.horse.getRandom().triangle(0.0D, 1.1485D), 0.0D, this.horse.getRandom().triangle(0.0D, 1.1485D));
+                        serverlevel.addFreshEntityWithPassengers(abstracthorse, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.JOCKEY); // CraftBukkit
+                     }
                   }
                }
             }
-
          }
-      }
+      }));
    }
 
    @Nullable
