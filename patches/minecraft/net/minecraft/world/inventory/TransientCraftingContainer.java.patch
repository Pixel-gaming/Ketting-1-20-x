--- a/net/minecraft/world/inventory/TransientCraftingContainer.java
+++ b/net/minecraft/world/inventory/TransientCraftingContainer.java
@@ -2,16 +_,86 @@
 
 import java.util.List;
 import net.minecraft.core.NonNullList;
+import net.minecraft.world.Container;
 import net.minecraft.world.ContainerHelper;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.player.StackedContents;
 import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.crafting.RecipeHolder;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.event.inventory.InventoryType;
+
+import javax.annotation.Nullable;
 
 public class TransientCraftingContainer implements CraftingContainer {
    private final NonNullList<ItemStack> items;
    private final int width;
    private final int height;
    private final AbstractContainerMenu menu;
+
+   // CraftBukkit start - add fields
+   public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+   private RecipeHolder<?> currentRecipe;
+   public Container resultInventory;
+   private Player owner;
+   private int maxStack = MAX_STACK;
+
+   public List<ItemStack> getContents() {
+      return this.items;
+   }
+
+   public void onOpen(CraftHumanEntity who) {
+      transaction.add(who);
+   }
+
+   public InventoryType getInvType() {
+      return items.size() == 4 ? InventoryType.CRAFTING : InventoryType.WORKBENCH;
+   }
+
+   public void onClose(CraftHumanEntity who) {
+      transaction.remove(who);
+   }
+
+   public List<HumanEntity> getViewers() {
+      return transaction;
+   }
+
+   public org.bukkit.inventory.InventoryHolder getOwner() {
+      return (owner == null) ? null : owner.getBukkitEntity();
+   }
+
+   @Override
+   public int getMaxStackSize() {
+      return maxStack;
+   }
+
+   public void setMaxStackSize(int size) {
+      maxStack = size;
+      resultInventory.setMaxStackSize(size);
+   }
+
+   @Override
+   public Location getLocation() {
+      return menu instanceof CraftingMenu ? ((CraftingMenu) menu).access.getLocation() : owner.getBukkitEntity().getLocation();
+   }
+
+   @Override
+   public @Nullable RecipeHolder<?> getCurrentRecipe() {
+      return currentRecipe;
+   }
+
+   @Override
+   public void setCurrentRecipe(RecipeHolder<?> currentRecipe) {
+      this.currentRecipe = currentRecipe;
+   }
+
+   public TransientCraftingContainer(AbstractContainerMenu container, int i, int j, Player player) {
+      this(container, i, j);
+      this.owner = player;
+   }
+   // CraftBukkit end
 
    public TransientCraftingContainer(AbstractContainerMenu p_287684_, int p_287629_, int p_287593_) {
       this(p_287684_, p_287629_, p_287593_, NonNullList.withSize(p_287629_ * p_287593_, ItemStack.EMPTY));
