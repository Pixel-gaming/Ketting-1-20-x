--- a/net/minecraft/world/level/storage/loot/LootTable.java
+++ b/net/minecraft/world/level/storage/loot/LootTable.java
@@ -39,14 +_,15 @@
    final LootContextParamSet paramSet;
    @Nullable
    final ResourceLocation randomSequence;
-   final LootPool[] pools;
+   private final List<LootPool> pools;
    final LootItemFunction[] functions;
    private final BiFunction<ItemStack, LootContext, ItemStack> compositeFunction;
+   public org.bukkit.craftbukkit.v1_20_R1.CraftLootTable craftLootTable; // CraftBukkit
 
    LootTable(LootContextParamSet p_287716_, @Nullable ResourceLocation p_287737_, LootPool[] p_287700_, LootItemFunction[] p_287663_) {
       this.paramSet = p_287716_;
       this.randomSequence = p_287737_;
-      this.pools = p_287700_;
+      this.pools = Lists.newArrayList(p_287700_);
       this.functions = p_287663_;
       this.compositeFunction = LootItemFunctions.compose(p_287663_);
    }
@@ -70,10 +_,12 @@
       };
    }
 
+   @Deprecated // Use a non-'Raw' version of 'getRandomItems', so that the Forge Global Loot Modifiers will be applied
    public void getRandomItemsRaw(LootParams p_287669_, Consumer<ItemStack> p_287781_) {
       this.getRandomItemsRaw((new LootContext.Builder(p_287669_)).create(this.randomSequence), p_287781_);
    }
 
+   @Deprecated // Use a non-'Raw' version of 'getRandomItems', so that the Forge Global Loot Modifiers will be applied
    public void getRandomItemsRaw(LootContext p_79132_, Consumer<ItemStack> p_79133_) {
       LootContext.VisitedEntry<?> visitedentry = LootContext.createVisitedEntry(this);
       if (p_79132_.pushVisitedElement(visitedentry)) {
@@ -91,15 +_,15 @@
    }
 
    public void getRandomItems(LootParams p_287748_, long p_287729_, Consumer<ItemStack> p_287583_) {
-      this.getRandomItemsRaw((new LootContext.Builder(p_287748_)).withOptionalRandomSeed(p_287729_).create(this.randomSequence), createStackSplitter(p_287748_.getLevel(), p_287583_));
+      this.getRandomItems((new LootContext.Builder(p_287748_)).withOptionalRandomSeed(p_287729_).create(this.randomSequence)).forEach(p_287583_);
    }
 
    public void getRandomItems(LootParams p_287704_, Consumer<ItemStack> p_287617_) {
-      this.getRandomItemsRaw(p_287704_, createStackSplitter(p_287704_.getLevel(), p_287617_));
+      this.getRandomItems(p_287704_).forEach(p_287617_);
    }
 
    public void getRandomItems(LootContext p_79149_, Consumer<ItemStack> p_79150_) {
-      this.getRandomItemsRaw(p_79149_, createStackSplitter(p_79149_.getLevel(), p_79150_));
+      this.getRandomItems(p_79149_).forEach(p_79150_);
    }
 
    public ObjectArrayList<ItemStack> getRandomItems(LootParams p_287574_, long p_287773_) {
@@ -112,7 +_,8 @@
 
    private ObjectArrayList<ItemStack> getRandomItems(LootContext p_230923_) {
       ObjectArrayList<ItemStack> objectarraylist = new ObjectArrayList<>();
-      this.getRandomItems(p_230923_, objectarraylist::add);
+      this.getRandomItemsRaw(p_230923_, createStackSplitter(p_230923_.getLevel(), objectarraylist::add));
+      objectarraylist = net.minecraftforge.common.ForgeHooks.modifyLoot(this.getLootTableId(), objectarraylist, p_230923_);
       return objectarraylist;
    }
 
@@ -121,8 +_,8 @@
    }
 
    public void validate(ValidationContext p_79137_) {
-      for(int i = 0; i < this.pools.length; ++i) {
-         this.pools[i].validate(p_79137_.forChild(".pools[" + i + "]"));
+      for(int i = 0; i < this.pools.size(); ++i) {
+         this.pools.get(i).validate(p_79137_.forChild(".pools[" + i + "]"));
       }
 
       for(int j = 0; j < this.functions.length; ++j) {
@@ -132,9 +_,22 @@
    }
 
    public void fill(Container p_287662_, LootParams p_287743_, long p_287585_) {
+      // CraftBukkit start
+      this.fillInventory(p_287662_, p_287743_, p_287585_, false);
+   }
+
+   public void fillInventory(Container p_287662_, LootParams p_287743_, long p_287585_, boolean plugin) {
+      // CraftBukkit end
       LootContext lootcontext = (new LootContext.Builder(p_287743_)).withOptionalRandomSeed(p_287585_).create(this.randomSequence);
       ObjectArrayList<ItemStack> objectarraylist = this.getRandomItems(lootcontext);
       RandomSource randomsource = lootcontext.getRandom();
+      // CraftBukkit start
+      org.bukkit.event.world.LootGenerateEvent event = org.bukkit.craftbukkit.v1_20_R1.event.CraftEventFactory.callLootGenerateEvent(p_287662_, this, lootcontext, objectarraylist, plugin);
+      if (event.isCancelled()) {
+         return;
+      }
+      objectarraylist = event.getLoot().stream().map(org.bukkit.craftbukkit.v1_20_R1.inventory.CraftItemStack::asNMSCopy).collect(ObjectArrayList.toList());
+      // CraftBukkit end
       List<Integer> list = this.getAvailableSlots(p_287662_, randomsource);
       this.shuffleAndSplitItems(objectarraylist, list.size(), randomsource);
 
@@ -205,6 +_,50 @@
       return new LootTable.Builder();
    }
 
+   //======================== FORGE START =============================================
+   private boolean isFrozen = false;
+   public void freeze() {
+      this.isFrozen = true;
+      this.pools.forEach(LootPool::freeze);
+   }
+   public boolean isFrozen(){ return this.isFrozen; }
+   private void checkFrozen() {
+      if (this.isFrozen())
+         throw new RuntimeException("Attempted to modify LootTable after being finalized!");
+   }
+
+   private ResourceLocation lootTableId;
+   public void setLootTableId(final ResourceLocation id) {
+      if (this.lootTableId != null) throw new IllegalStateException("Attempted to rename loot table from '" + this.lootTableId + "' to '" + id + "': this is not supported");
+      this.lootTableId = java.util.Objects.requireNonNull(id);
+   }
+   public ResourceLocation getLootTableId() { return this.lootTableId; }
+
+   @org.jetbrains.annotations.Nullable
+   public LootPool getPool(String name) {
+      return pools.stream().filter(e -> name.equals(e.getName())).findFirst().orElse(null);
+   }
+
+   @org.jetbrains.annotations.Nullable
+   public LootPool removePool(String name) {
+      checkFrozen();
+      for (LootPool pool : this.pools) {
+         if (name.equals(pool.getName())) {
+            this.pools.remove(pool);
+            return pool;
+         }
+      }
+      return null;
+   }
+
+   public void addPool(LootPool pool) {
+      checkFrozen();
+      if (pools.stream().anyMatch(e -> e == pool || e.getName() != null && e.getName().equals(pool.getName())))
+         throw new RuntimeException("Attempted to add a duplicate pool to loot table: " + pool.getName());
+      this.pools.add(pool);
+   }
+   //======================== FORGE END ===============================================
+
    public static class Builder implements FunctionUserBuilder<LootTable.Builder> {
       private final List<LootPool> pools = Lists.newArrayList();
       private final List<LootItemFunction> functions = Lists.newArrayList();
@@ -278,7 +_,7 @@
             jsonobject.addProperty("random_sequence", p_79177_.randomSequence.toString());
          }
 
-         if (p_79177_.pools.length > 0) {
+         if (!p_79177_.pools.isEmpty()) {
             jsonobject.add("pools", p_79179_.serialize(p_79177_.pools));
          }
 
