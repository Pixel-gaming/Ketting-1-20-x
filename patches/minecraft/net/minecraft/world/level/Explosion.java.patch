--- a/net/minecraft/world/level/Explosion.java
+++ b/net/minecraft/world/level/Explosion.java
@@ -37,6 +_,15 @@
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
 
+//Ketting start
+import net.minecraft.world.entity.boss.EnderDragonPart;
+import net.minecraft.world.entity.boss.enderdragon.EnderDragon;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.v1_20_R2.event.CraftEventFactory;
+import org.bukkit.event.block.BlockExplodeEvent;
+import org.bukkit.event.entity.EntityExplodeEvent;
+//Ketting end
+
 public class Explosion {
    private static final ExplosionDamageCalculator EXPLOSION_DAMAGE_CALCULATOR = new ExplosionDamageCalculator();
    private static final int MAX_DROPS_PER_COMBINED_STACK = 16;
@@ -48,7 +_,7 @@
    private final double y;
    private final double z;
    @Nullable
-   private final Entity source;
+   public final Entity source;
    private final float radius;
    private final DamageSource damageSource;
    private final ExplosionDamageCalculator damageCalculator;
@@ -57,6 +_,8 @@
    private final SoundEvent explosionSound;
    private final ObjectArrayList<BlockPos> toBlow = new ObjectArrayList<>();
    private final Map<Player, Vec3> hitPlayers = Maps.newHashMap();
+   private final Vec3 position;
+   public boolean wasCanceled = false; // CraftBukkit - add field
 
    public static DamageSource getDefaultDamageSource(Level p_309890_, @Nullable Entity p_311046_) {
       return p_309890_.damageSources().explosion(p_311046_, getIndirectSourceEntityInternal(p_311046_));
@@ -79,7 +_,7 @@
    public Explosion(Level p_46051_, @Nullable Entity p_46052_, @Nullable DamageSource p_46053_, @Nullable ExplosionDamageCalculator p_46054_, double p_46055_, double p_46056_, double p_46057_, float p_46058_, boolean p_46059_, Explosion.BlockInteraction p_46060_, ParticleOptions p_312175_, ParticleOptions p_310459_, SoundEvent p_311795_) {
       this.level = p_46051_;
       this.source = p_46052_;
-      this.radius = p_46058_;
+      this.radius = (float) Math.max(p_46058_, 0.0); // CraftBukkit - clamp bad values
       this.x = p_46055_;
       this.y = p_46056_;
       this.z = p_46057_;
@@ -90,6 +_,7 @@
       this.smallExplosionParticles = p_312175_;
       this.largeExplosionParticles = p_310459_;
       this.explosionSound = p_311795_;
+      this.position = new Vec3(this.x, this.y, this.z);
    }
 
    private ExplosionDamageCalculator makeDamageCalculator(@Nullable Entity p_46063_) {
@@ -138,6 +_,11 @@
    }
 
    public void explode() {
+      // CraftBukkit start
+      if (this.radius < 0.1F) {
+         return;
+      }
+      // CraftBukkit end
       this.level.gameEvent(this.source, GameEvent.EXPLODE, new Vec3(this.x, this.y, this.z));
       Set<BlockPos> set = Sets.newHashSet();
       int i = 16;
@@ -193,6 +_,7 @@
       int j2 = Mth.floor(this.z - (double)f2 - 1.0D);
       int j1 = Mth.floor(this.z + (double)f2 + 1.0D);
       List<Entity> list = this.level.getEntities(this.source, new AABB((double)k1, (double)i2, (double)j2, (double)l1, (double)i1, (double)j1));
+      net.minecraftforge.event.ForgeEventFactory.onExplosionDetonate(this.level, this, list, f2);
       Vec3 vec3 = new Vec3(this.x, this.y, this.z);
 
       for(Entity entity : list) {
@@ -208,7 +_,37 @@
                   d7 /= d12;
                   d9 /= d12;
                   if (this.damageCalculator.shouldDamageEntity(this, entity)) {
-                     entity.hurt(this.damageSource, this.damageCalculator.getEntityDamageAmount(this, entity));
+                     // CraftBukkit start
+                     // Special case ender dragon only give knockback if no damage is cancelled
+                     // Thinks to note:
+                     // - Setting a velocity to a ComplexEntityPart is ignored (and therefore not needed)
+                     // - Damaging ComplexEntityPart while forward the damage to EntityEnderDragon
+                     // - Damaging EntityEnderDragon does nothing
+                     // - EntityEnderDragon hitbock always covers the other parts and is therefore always present
+                     if (entity instanceof EnderDragonPart) {
+                        continue;
+                     }
+
+                     CraftEventFactory.entityDamage = source;
+                     entity.lastDamageCancelled = false;
+
+                     if (entity instanceof EnderDragon dragon) {
+                        for (EnderDragonPart subEntity : dragon.subEntities) {
+                           double d7part;
+                           if (list.contains(subEntity) && (d7part = Math.sqrt(subEntity.distanceToSqr(vec3)) / f2) <= 1.0D) {
+                              double d13part = (1.0D - d7part) * getSeenPercent(vec3, subEntity);
+                              subEntity.hurt(this.damageSource, (float) ((int) ((d13part * d13part + d13part) / 2.0D * 7.0D * (double) f2 + 1.0D)));
+                           }
+                        }
+                     } else {
+                        entity.hurt(this.damageSource, this.damageCalculator.getEntityDamageAmount(this, entity));
+                     }
+
+                     CraftEventFactory.entityDamage = null;
+                     if (entity.lastDamageCancelled) { // SPIGOT-5339, SPIGOT-6252, SPIGOT-6777: Skip entity if damage event was cancelled
+                        continue;
+                     }
+                     // CraftBukkit end
                   }
 
                   double d13 = (1.0D - d11) * (double)getSeenPercent(vec3, entity);
@@ -276,7 +_,11 @@
       if (this.fire) {
          for(BlockPos blockpos1 : this.toBlow) {
             if (this.random.nextInt(3) == 0 && this.level.getBlockState(blockpos1).isAir() && this.level.getBlockState(blockpos1.below()).isSolidRender(this.level, blockpos1.below())) {
-               this.level.setBlockAndUpdate(blockpos1, BaseFireBlock.getState(this.level, blockpos1));
+               // CraftBukkit start - Ignition by explosion
+               if (!org.bukkit.craftbukkit.v1_20_R2.event.CraftEventFactory.callBlockIgniteEvent(this.level, blockpos1.getX(), blockpos1.getY(), blockpos1.getZ(), this).isCancelled()) {
+                  this.level.setBlockAndUpdate(blockpos1, BaseFireBlock.getState(this.level, blockpos1));
+               }
+               // CraftBukkit end
             }
          }
       }
@@ -284,6 +_,8 @@
    }
 
    private static void addOrAppendStack(List<Pair<ItemStack, BlockPos>> p_311090_, ItemStack p_311817_, BlockPos p_309821_) {
+     if (p_311817_.isEmpty()) return; // CraftBukkit - SPIGOT-5425
+
       for(int i = 0; i < p_311090_.size(); ++i) {
          Pair<ItemStack, BlockPos> pair = p_311090_.get(i);
          ItemStack itemstack = pair.getFirst();
@@ -345,6 +_,15 @@
 
    public List<BlockPos> getToBlow() {
       return this.toBlow;
+   }
+
+   public Vec3 getPosition() {
+      return this.position;
+   }
+
+   @Nullable
+   public Entity getExploder() {
+      return this.source;
    }
 
    public Explosion.BlockInteraction getBlockInteraction() {
