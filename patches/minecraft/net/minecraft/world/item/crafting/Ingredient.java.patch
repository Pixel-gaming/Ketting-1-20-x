--- a/net/minecraft/world/item/crafting/Ingredient.java
+++ b/net/minecraft/world/item/crafting/Ingredient.java
@@ -30,12 +_,20 @@
 import net.minecraft.world.level.ItemLike;
 
 public class Ingredient implements Predicate<ItemStack> {
+   //Because Mojang caches things... we need to invalidate them.. so... here we go..
+   private static final java.util.concurrent.atomic.AtomicInteger INVALIDATION_COUNTER = new java.util.concurrent.atomic.AtomicInteger();
+   public static void invalidateAll() {
+      INVALIDATION_COUNTER.incrementAndGet();
+   }
+
    public static final Ingredient EMPTY = new Ingredient(Stream.empty());
    private final Ingredient.Value[] values;
    @Nullable
    public ItemStack[] itemStacks;
    @Nullable
    private IntList stackingIds;
+   public boolean exact; // CraftBukkit
+   private int invalidationCounter;
 
    public Ingredient(Stream<? extends Ingredient.Value> p_43907_) {
       this.values = p_43907_.toArray((p_43933_) -> {
@@ -62,6 +_,15 @@
          return p_43914_.isEmpty();
       } else {
          for(ItemStack itemstack : this.getItems()) {
+            // CraftBukkit start
+            if (exact) {
+               if (itemstack.getItem() == p_43914_.getItem() && ItemStack.isSameItemSameTags(p_43914_, itemstack)) {
+                  return true;
+               }
+
+               continue;
+            }
+            // CraftBukkit end
             if (itemstack.is(p_43914_.getItem())) {
                return true;
             }
@@ -72,7 +_,8 @@
    }
 
    public IntList getStackingIds() {
-      if (this.stackingIds == null) {
+      if (this.stackingIds == null || checkInvalidation()) {
+         this.markValid();
          ItemStack[] aitemstack = this.getItems();
          this.stackingIds = new IntArrayList(aitemstack.length);
 
@@ -87,6 +_,10 @@
    }
 
    public final void toNetwork(FriendlyByteBuf p_43924_) {
+      if (!this.isVanilla()) {
+         net.minecraftforge.common.crafting.CraftingHelper.write(p_43924_, this);
+         return;
+      }
       p_43924_.writeCollection(Arrays.asList(this.getItems()), FriendlyByteBuf::writeItem);
    }
 
@@ -108,6 +_,38 @@
       return this.values.length == 0;
    }
 
+   public final boolean checkInvalidation() {
+      int currentInvalidationCounter = INVALIDATION_COUNTER.get();
+      if (this.invalidationCounter != currentInvalidationCounter) {
+         invalidate();
+         return true;
+      }
+      return false;
+   }
+
+   protected final void markValid() {
+      this.invalidationCounter = INVALIDATION_COUNTER.get();
+   }
+
+   protected void invalidate() {
+      this.itemStacks = null;
+      this.stackingIds = null;
+   }
+
+   public boolean isSimple() {
+      return true;
+   }
+
+   private final boolean isVanilla = this.getClass() == Ingredient.class;
+   public final boolean isVanilla() {
+       return isVanilla;
+   }
+
+   public net.minecraftforge.common.crafting.IIngredientSerializer<? extends Ingredient> getSerializer() {
+      if (!isVanilla()) throw new IllegalStateException("Modders must implement Ingredient.getSerializer in their custom Ingredients: " + this);
+      return net.minecraftforge.common.crafting.VanillaIngredientSerializer.INSTANCE;
+   }
+
    public static Ingredient fromValues(Stream<? extends Ingredient.Value> p_43939_) {
       Ingredient ingredient = new Ingredient(p_43939_);
       return ingredient.isEmpty() ? EMPTY : ingredient;
@@ -136,7 +_,9 @@
    }
 
    public static Ingredient fromNetwork(FriendlyByteBuf p_43941_) {
-      return fromValues(p_43941_.<ItemStack>readList(FriendlyByteBuf::readItem).stream().map(Ingredient.ItemValue::new));
+      var size = p_43941_.readVarInt();
+      if (size == -1) return net.minecraftforge.common.crafting.CraftingHelper.getIngredient(p_43941_.readResourceLocation(), p_43941_);
+      return fromValues(Stream.generate(() -> new Ingredient.ItemValue(p_43941_.readItem())).limit(size));
    }
 
    public static Ingredient fromJson(@Nullable JsonElement p_43918_) {
@@ -145,6 +_,8 @@
 
    public static Ingredient fromJson(@Nullable JsonElement p_289022_, boolean p_288974_) {
       if (p_289022_ != null && !p_289022_.isJsonNull()) {
+         Ingredient ret = net.minecraftforge.common.crafting.CraftingHelper.getIngredient(p_289022_, p_288974_);
+         if (ret != null) return ret;
          if (p_289022_.isJsonObject()) {
             return fromValues(Stream.of(valueFromJson(p_289022_.getAsJsonObject())));
          } else if (p_289022_.isJsonArray()) {
@@ -179,6 +_,12 @@
       }
    }
 
+   //Merges several vanilla Ingredients together. As a quirk of how the json is structured, we can't tell if its a single Ingredient type or multiple so we split per item and re-merge here.
+   //Only public for internal use, so we can access a private field in here.
+   public static Ingredient merge(Collection<Ingredient> parts) {
+      return fromValues(parts.stream().flatMap(i -> Arrays.stream(i.values)));
+   }
+
    public static class ItemValue implements Ingredient.Value {
       private final ItemStack item;
 
@@ -211,6 +_,9 @@
             list.add(new ItemStack(holder));
          }
 
+         if (list.size() == 0) {
+            list.add(new ItemStack(net.minecraft.world.level.block.Blocks.BARRIER).setHoverName(net.minecraft.network.chat.Component.literal("Empty Tag: " + this.tag.location())));
+         }
          return list;
       }
 
