--- a/net/minecraft/world/item/crafting/SimpleCookingSerializer.java
+++ b/net/minecraft/world/item/crafting/SimpleCookingSerializer.java
@@ -22,11 +_,17 @@
       CookingBookCategory cookingbookcategory = CookingBookCategory.CODEC.byName(GsonHelper.getAsString(p_44348_, "category", (String)null), CookingBookCategory.MISC);
       JsonElement jsonelement = (JsonElement)(GsonHelper.isArrayNode(p_44348_, "ingredient") ? GsonHelper.getAsJsonArray(p_44348_, "ingredient") : GsonHelper.getAsJsonObject(p_44348_, "ingredient"));
       Ingredient ingredient = Ingredient.fromJson(jsonelement, false);
+      //Forge: Check if primitive string to keep vanilla or a object which can contain a count field.
+      if (!p_44348_.has("result")) throw new com.google.gson.JsonSyntaxException("Missing result, expected to find a string or object");
+      ItemStack itemstack;
+      if (p_44348_.get("result").isJsonObject()) itemstack = ShapedRecipe.itemStackFromJson(GsonHelper.getAsJsonObject(p_44348_, "result"));
+      else {
       String s1 = GsonHelper.getAsString(p_44348_, "result");
       ResourceLocation resourcelocation = new ResourceLocation(s1);
-      ItemStack itemstack = new ItemStack(BuiltInRegistries.ITEM.getOptional(resourcelocation).orElseThrow(() -> {
+      itemstack = new ItemStack(BuiltInRegistries.ITEM.getOptional(resourcelocation).orElseThrow(() -> {
          return new IllegalStateException("Item: " + s1 + " does not exist");
       }));
+      }
       float f = GsonHelper.getAsFloat(p_44348_, "experience", 0.0F);
       int i = GsonHelper.getAsInt(p_44348_, "cookingtime", this.defaultCookingTime);
       return this.factory.create(p_44347_, s, cookingbookcategory, ingredient, itemstack, f, i);
